ParticipantInfo_risk <- read.csv("\\\\ucdenver.pvt\\som-home\\pylell\\BDC\\Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\Participant Info risk 091818.csv")
# get rid of duplicates
ParticipantInfo_risk <- unique(ParticipantInfo_risk)
# no duplicates
# merge participant info and longitudinal data
keep_ppt <- data.frame(ParticipantInfo_risk$TrialNet,
ParticipantInfo_risk$T1D,
ParticipantInfo_risk$Date.of.Diagnosis)
colnames(keep_ppt) <- c("Random_ID","T1D","Date_of_Diagnosis")
keep_long <- data.frame(longitudinal_visit_info$PID,
longitudinal_visit_info$Draw.Date,
longitudinal_visit_info$GAD65,
longitudinal_visit_info$GAD65H,
longitudinal_visit_info$ICA512,
longitudinal_visit_info$IA2H,
longitudinal_visit_info$mIAA,
longitudinal_visit_info$ZnT8,
longitudinal_visit_info$ICA,
longitudinal_visit_info$U.per.MplusU.Ratio.Zen,
longitudinal_visit_info$ECL_GADA,
longitudinal_visit_info$ECL_IA.2A,
longitudinal_visit_info$ECL_IAA,
longitudinal_visit_info$Proinsulin_pM.L,
longitudinal_visit_info$PEP0)
colnames(keep_long) <- c("Random_ID","Draw_Date","GAD65","GAD65H","ICA512","IA_2H","mIAA","ZnT8","ICA","U_MplusU_Ratio_Zen","ECL_GADA","ECL_IA2A","ECL_IAA","Proinsulin_pM_L","PEP0")
# convert draw date to date
#keep_long$Draw_Date <- mdy_hms(as.character(keep_long$Draw_Date))
#keep_long$Draw_Date <- as.POSIXlt(as.character(keep_long$Draw_Date),format="%m%d%Y %H%M")
keep_long$Draw_Date <- mdy_hm(as.character(keep_long$Draw_Date))
# calculate fasting Cpeptide in pM/L
keep_long$PEP0_pM_L <- keep_long$PEP0*331.09
# calculate proinsulin/Cpep ratio
keep_long$Pro_pep <- keep_long$Proinsulin_pM_L/keep_long$PEP0_pM_L*100
# merge  datasets
alldata <- merge(keep_ppt,keep_long,by="Random_ID",all.x=F,all.y=F)
# first code each antibody as positive negative
for(i in 1:nrow(alldata)){
###coding for miaa
a <-ifelse(is.na(alldata$mIAA[i]),
NA,
ifelse(alldata$mIAA[i] <= 0.01, 0, 1)
)
alldata$miaa_cat[i]<- a
###coding for first form of gad65
b <-ifelse(is.na(alldata$GAD65[i]),
NA,
ifelse(alldata$GAD65[i] <= 0.032, 0, 1)
)
alldata$gad65_cat[i]<- b
###coding for second form of gad65
c<-ifelse(is.na(alldata$GAD65H[i]),
NA,
ifelse(alldata$GAD65H[i] <= 20, 0, 1)
)
alldata$gad65h_cat[i]<- c
###coding for first form of ica512/ia2
d<-ifelse(is.na(alldata$ICA512[i]),
NA,
ifelse(alldata$ICA512[i] <= 0.049, 0, 1)
)
alldata$ica512_cat[i]<- d
###coding for second form of ica512/ia2
e<-ifelse(is.na(alldata$IA_2H[i]),
NA,
ifelse(alldata$IA_2H[i] <= 5, 0, 1)
)
alldata$ia2h_cat[i]<- e
###coding for znt8
f<-ifelse(is.na(alldata$ZnT8[i]),
NA,
ifelse(alldata$ZnT8[i] <= 0.02, 0, 1)
)
alldata$znt8_cat[i]<- f
}
#####combining both forms of gad65 tests
for(i in 1:nrow(alldata)){
test <- sum(alldata$ica512_cat[i],alldata$ia2h_cat[i],na.rm=TRUE)
de <- ifelse(is.na(alldata$ica512_cat[i]) & is.na(alldata$ia2h_cat[i]),
NA,
ifelse(test>=1,1,0))
alldata$ica512_ia2_cat[i]<- de
test2 <- sum(alldata$gad65_cat[i],alldata$gad65h_cat[i],na.rm=TRUE)
bc <- ifelse(is.na(alldata$gad65_cat[i]) & is.na(alldata$gad65h_cat[i]),
1,
ifelse(test2>=1,1,0))
alldata$GAD65_combo_cat[i]<- bc
}
# if all ab results missing, delete the record
alldata <- alldata[!is.na(alldata$mIAA) | !is.na(alldata$miaa_cat) | !is.na(alldata$ica512_ia2_cat),]
# 36 records deleted
# check if anyone is missing GAD, ICA/IA2, or mIAA
missing <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
write.csv(missing,file="missing.csv")
# get rid of visits with missing mIAA data
alldata <- alldata[!is.na(alldata$GAD65_combo_cat) & !is.na(alldata$miaa_cat) & !is.na(alldata$ica512_ia2_cat),]
# 40 records deleted
# calculate number of positive ab at each visit
for(i in 1:nrow(alldata)){
alldata$numpos[i] <- sum(alldata$ica512_ia2_cat[i],alldata$GAD65_combo_cat[i],alldata$miaa_cat[i],alldata$znt8_cat[i],na.rm=T)
}
# need to find out if anyone is missing proinsulin ratio at all visits
sortds <- alldata[order(alldata$Random_ID,desc(alldata$Proinsulin_pM_L)),]
hasproins <- sortds %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
a <- hasproins[is.na(hasproins$Proinsulin_pM_L),]
a <- a[,1]
a$flag <- rep(1,nrow(a))
nrow(a)
# 12 subjects missing proinsulin - need to merge this back with original dataset and take those people out
# keep only those IDs that are in both dataframes
alldata <- merge(alldata,a,all.x=TRUE,by="Random_ID")
alldata <- alldata[is.na(alldata$flag),]
# who is missing T1D data?
missingt1d <- alldata[is.na(alldata$T1D),]
# no one is missing t1d status
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
# Aggregate diagnosis table taking the maximum value.
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
# Find the single ab+ who were incorrectly categorized, set back to 0.
recat <- single[
which(single %in% diagnosis.table[diagnosis.table$group == 1,"Random_ID"])]
diagnosis.table[diagnosis.table$Random_ID %in% recat,"group"] <- 0
colnames(diagnosis.table) <- c("Random_ID","final.group")
# merge final group category with all results
allresults <- merge(allresults,diagnosis.table,by="Random_ID")
allresults$test <- factor(allresults$final.group,levels=c("Negative","Single ab positive","Multiple ab positive","T1D"))
"Negative","Single ab positive","Multiple ab positive","T1D"
allresults$test <- factor(allresults$final.group)
levels(allresults$test)=c("Negative","Single ab positive","Multiple ab positive","T1D")
#library(sqldf)
library(dplyr)
library(lubridate)
library(graphics)
library(ggplot2)
# read in the data
longitudinal_visit_info <- read.csv("\\\\ucdenver.pvt\\som-home\\pylell\\BDC\\Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\longitudinal 091818.csv")
ParticipantInfo_risk <- read.csv("\\\\ucdenver.pvt\\som-home\\pylell\\BDC\\Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\Participant Info risk 091818.csv")
# get rid of duplicates
ParticipantInfo_risk <- unique(ParticipantInfo_risk)
# no duplicates
# merge participant info and longitudinal data
keep_ppt <- data.frame(ParticipantInfo_risk$TrialNet,
ParticipantInfo_risk$T1D,
ParticipantInfo_risk$Date.of.Diagnosis)
colnames(keep_ppt) <- c("Random_ID","T1D","Date_of_Diagnosis")
keep_long <- data.frame(longitudinal_visit_info$PID,
longitudinal_visit_info$Draw.Date,
longitudinal_visit_info$GAD65,
longitudinal_visit_info$GAD65H,
longitudinal_visit_info$ICA512,
longitudinal_visit_info$IA2H,
longitudinal_visit_info$mIAA,
longitudinal_visit_info$ZnT8,
longitudinal_visit_info$ICA,
longitudinal_visit_info$U.per.MplusU.Ratio.Zen,
longitudinal_visit_info$ECL_GADA,
longitudinal_visit_info$ECL_IA.2A,
longitudinal_visit_info$ECL_IAA,
longitudinal_visit_info$Proinsulin_pM.L,
longitudinal_visit_info$PEP0)
colnames(keep_long) <- c("Random_ID","Draw_Date","GAD65","GAD65H","ICA512","IA_2H","mIAA","ZnT8","ICA","U_MplusU_Ratio_Zen","ECL_GADA","ECL_IA2A","ECL_IAA","Proinsulin_pM_L","PEP0")
# convert draw date to date
#keep_long$Draw_Date <- mdy_hms(as.character(keep_long$Draw_Date))
#keep_long$Draw_Date <- as.POSIXlt(as.character(keep_long$Draw_Date),format="%m%d%Y %H%M")
keep_long$Draw_Date <- mdy_hm(as.character(keep_long$Draw_Date))
# calculate fasting Cpeptide in pM/L
keep_long$PEP0_pM_L <- keep_long$PEP0*331.09
# calculate proinsulin/Cpep ratio
keep_long$Pro_pep <- keep_long$Proinsulin_pM_L/keep_long$PEP0_pM_L*100
# merge  datasets
alldata <- merge(keep_ppt,keep_long,by="Random_ID",all.x=F,all.y=F)
# first code each antibody as positive negative
for(i in 1:nrow(alldata)){
###coding for miaa
a <-ifelse(is.na(alldata$mIAA[i]),
NA,
ifelse(alldata$mIAA[i] <= 0.01, 0, 1)
)
alldata$miaa_cat[i]<- a
###coding for first form of gad65
b <-ifelse(is.na(alldata$GAD65[i]),
NA,
ifelse(alldata$GAD65[i] <= 0.032, 0, 1)
)
alldata$gad65_cat[i]<- b
###coding for second form of gad65
c<-ifelse(is.na(alldata$GAD65H[i]),
NA,
ifelse(alldata$GAD65H[i] <= 20, 0, 1)
)
alldata$gad65h_cat[i]<- c
###coding for first form of ica512/ia2
d<-ifelse(is.na(alldata$ICA512[i]),
NA,
ifelse(alldata$ICA512[i] <= 0.049, 0, 1)
)
alldata$ica512_cat[i]<- d
###coding for second form of ica512/ia2
e<-ifelse(is.na(alldata$IA_2H[i]),
NA,
ifelse(alldata$IA_2H[i] <= 5, 0, 1)
)
alldata$ia2h_cat[i]<- e
###coding for znt8
f<-ifelse(is.na(alldata$ZnT8[i]),
NA,
ifelse(alldata$ZnT8[i] <= 0.02, 0, 1)
)
alldata$znt8_cat[i]<- f
}
#####combining both forms of gad65 tests
for(i in 1:nrow(alldata)){
test <- sum(alldata$ica512_cat[i],alldata$ia2h_cat[i],na.rm=TRUE)
de <- ifelse(is.na(alldata$ica512_cat[i]) & is.na(alldata$ia2h_cat[i]),
NA,
ifelse(test>=1,1,0))
alldata$ica512_ia2_cat[i]<- de
test2 <- sum(alldata$gad65_cat[i],alldata$gad65h_cat[i],na.rm=TRUE)
bc <- ifelse(is.na(alldata$gad65_cat[i]) & is.na(alldata$gad65h_cat[i]),
1,
ifelse(test2>=1,1,0))
alldata$GAD65_combo_cat[i]<- bc
}
# if all ab results missing, delete the record
alldata <- alldata[!is.na(alldata$mIAA) | !is.na(alldata$miaa_cat) | !is.na(alldata$ica512_ia2_cat),]
# 36 records deleted
# check if anyone is missing GAD, ICA/IA2, or mIAA
missing <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
write.csv(missing,file="missing.csv")
# get rid of visits with missing mIAA data
alldata <- alldata[!is.na(alldata$GAD65_combo_cat) & !is.na(alldata$miaa_cat) & !is.na(alldata$ica512_ia2_cat),]
# 40 records deleted
# calculate number of positive ab at each visit
for(i in 1:nrow(alldata)){
alldata$numpos[i] <- sum(alldata$ica512_ia2_cat[i],alldata$GAD65_combo_cat[i],alldata$miaa_cat[i],alldata$znt8_cat[i],na.rm=T)
}
# need to find out if anyone is missing proinsulin ratio at all visits
sortds <- alldata[order(alldata$Random_ID,desc(alldata$Proinsulin_pM_L)),]
hasproins <- sortds %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
a <- hasproins[is.na(hasproins$Proinsulin_pM_L),]
a <- a[,1]
a$flag <- rep(1,nrow(a))
nrow(a)
# 12 subjects missing proinsulin - need to merge this back with original dataset and take those people out
# keep only those IDs that are in both dataframes
alldata <- merge(alldata,a,all.x=TRUE,by="Random_ID")
alldata <- alldata[is.na(alldata$flag),]
# who is missing T1D data?
missingt1d <- alldata[is.na(alldata$T1D),]
# no one is missing t1d status
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
# Aggregate diagnosis table taking the maximum value.
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
# Find the single ab+ who were incorrectly categorized, set back to 0.
recat <- single[
which(single %in% diagnosis.table[diagnosis.table$group == 1,"Random_ID"])]
diagnosis.table[diagnosis.table$Random_ID %in% recat,"group"] <- 0
colnames(diagnosis.table) <- c("Random_ID","final.group")
# merge final group category with all results
allresults <- merge(allresults,diagnosis.table,by="Random_ID")
# make categorical variable for final group
# BELOW DOES NOT WORK - WILL NEED TO FIX
#allresults$final.group <- plyr::revalue(allresults$final.group,c(0 = "Negative", 1 = "Single ab positive",2 = "Multiple ab positive",3 ="T1D"))
# Merge the diagnosis back into the full table.
alldata <- merge(alldata,diagnosis.table,by = "Random_ID")
View(alldata)
View(alldata)
# spaghetti plots of outcomes
alldata <- alldata[order(alldata$Random_ID,alldata$Draw_Date),]
alldata$time <- alldata$Draw_Date - alldata$Draw_Date[1]
diagnosis.table[diagnosis.table$Random_ID %in% recat,"group"] <- 0
units(alldata$time) <- "days"
alldata$time <- round(alldata$time/365.25,digits=1)
#library(sqldf)
library(dplyr)
library(lubridate)
library(graphics)
library(ggplot2)
# read in the data
longitudinal_visit_info <- read.csv("\\\\ucdenver.pvt\\som-home\\pylell\\BDC\\Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\longitudinal 091818.csv")
ParticipantInfo_risk <- read.csv("\\\\ucdenver.pvt\\som-home\\pylell\\BDC\\Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\Participant Info risk 091818.csv")
# get rid of duplicates
ParticipantInfo_risk <- unique(ParticipantInfo_risk)
# no duplicates
# merge participant info and longitudinal data
keep_ppt <- data.frame(ParticipantInfo_risk$TrialNet,
ParticipantInfo_risk$T1D,
ParticipantInfo_risk$Date.of.Diagnosis)
colnames(keep_ppt) <- c("Random_ID","T1D","Date_of_Diagnosis")
keep_long <- data.frame(longitudinal_visit_info$PID,
longitudinal_visit_info$Draw.Date,
longitudinal_visit_info$GAD65,
longitudinal_visit_info$GAD65H,
longitudinal_visit_info$ICA512,
longitudinal_visit_info$IA2H,
longitudinal_visit_info$mIAA,
longitudinal_visit_info$ZnT8,
longitudinal_visit_info$ICA,
longitudinal_visit_info$U.per.MplusU.Ratio.Zen,
longitudinal_visit_info$ECL_GADA,
longitudinal_visit_info$ECL_IA.2A,
longitudinal_visit_info$ECL_IAA,
longitudinal_visit_info$Proinsulin_pM.L,
longitudinal_visit_info$PEP0)
colnames(keep_long) <- c("Random_ID","Draw_Date","GAD65","GAD65H","ICA512","IA_2H","mIAA","ZnT8","ICA","U_MplusU_Ratio_Zen","ECL_GADA","ECL_IA2A","ECL_IAA","Proinsulin_pM_L","PEP0")
# convert draw date to date
#keep_long$Draw_Date <- mdy_hms(as.character(keep_long$Draw_Date))
#keep_long$Draw_Date <- as.POSIXlt(as.character(keep_long$Draw_Date),format="%m%d%Y %H%M")
keep_long$Draw_Date <- mdy_hm(as.character(keep_long$Draw_Date))
# calculate fasting Cpeptide in pM/L
keep_long$PEP0_pM_L <- keep_long$PEP0*331.09
# calculate proinsulin/Cpep ratio
keep_long$Pro_pep <- keep_long$Proinsulin_pM_L/keep_long$PEP0_pM_L*100
# merge  datasets
alldata <- merge(keep_ppt,keep_long,by="Random_ID",all.x=F,all.y=F)
# first code each antibody as positive negative
for(i in 1:nrow(alldata)){
###coding for miaa
a <-ifelse(is.na(alldata$mIAA[i]),
NA,
ifelse(alldata$mIAA[i] <= 0.01, 0, 1)
)
alldata$miaa_cat[i]<- a
###coding for first form of gad65
b <-ifelse(is.na(alldata$GAD65[i]),
NA,
ifelse(alldata$GAD65[i] <= 0.032, 0, 1)
)
alldata$gad65_cat[i]<- b
###coding for second form of gad65
c<-ifelse(is.na(alldata$GAD65H[i]),
NA,
ifelse(alldata$GAD65H[i] <= 20, 0, 1)
)
alldata$gad65h_cat[i]<- c
###coding for first form of ica512/ia2
d<-ifelse(is.na(alldata$ICA512[i]),
NA,
ifelse(alldata$ICA512[i] <= 0.049, 0, 1)
)
alldata$ica512_cat[i]<- d
###coding for second form of ica512/ia2
e<-ifelse(is.na(alldata$IA_2H[i]),
NA,
ifelse(alldata$IA_2H[i] <= 5, 0, 1)
)
alldata$ia2h_cat[i]<- e
###coding for znt8
f<-ifelse(is.na(alldata$ZnT8[i]),
NA,
ifelse(alldata$ZnT8[i] <= 0.02, 0, 1)
)
alldata$znt8_cat[i]<- f
}
#####combining both forms of gad65 tests
for(i in 1:nrow(alldata)){
test <- sum(alldata$ica512_cat[i],alldata$ia2h_cat[i],na.rm=TRUE)
de <- ifelse(is.na(alldata$ica512_cat[i]) & is.na(alldata$ia2h_cat[i]),
NA,
ifelse(test>=1,1,0))
alldata$ica512_ia2_cat[i]<- de
test2 <- sum(alldata$gad65_cat[i],alldata$gad65h_cat[i],na.rm=TRUE)
bc <- ifelse(is.na(alldata$gad65_cat[i]) & is.na(alldata$gad65h_cat[i]),
1,
ifelse(test2>=1,1,0))
alldata$GAD65_combo_cat[i]<- bc
}
# if all ab results missing, delete the record
alldata <- alldata[!is.na(alldata$mIAA) | !is.na(alldata$miaa_cat) | !is.na(alldata$ica512_ia2_cat),]
# 36 records deleted
# check if anyone is missing GAD, ICA/IA2, or mIAA
missing <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
write.csv(missing,file="missing.csv")
# get rid of visits with missing mIAA data
alldata <- alldata[!is.na(alldata$GAD65_combo_cat) & !is.na(alldata$miaa_cat) & !is.na(alldata$ica512_ia2_cat),]
# 40 records deleted
# calculate number of positive ab at each visit
for(i in 1:nrow(alldata)){
alldata$numpos[i] <- sum(alldata$ica512_ia2_cat[i],alldata$GAD65_combo_cat[i],alldata$miaa_cat[i],alldata$znt8_cat[i],na.rm=T)
}
# need to find out if anyone is missing proinsulin ratio at all visits
sortds <- alldata[order(alldata$Random_ID,desc(alldata$Proinsulin_pM_L)),]
hasproins <- sortds %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
a <- hasproins[is.na(hasproins$Proinsulin_pM_L),]
a <- a[,1]
a$flag <- rep(1,nrow(a))
nrow(a)
# 12 subjects missing proinsulin - need to merge this back with original dataset and take those people out
# keep only those IDs that are in both dataframes
alldata <- merge(alldata,a,all.x=TRUE,by="Random_ID")
alldata <- alldata[is.na(alldata$flag),]
# who is missing T1D data?
missingt1d <- alldata[is.na(alldata$T1D),]
# no one is missing t1d status
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
# Aggregate diagnosis table taking the maximum value.
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
# Find the single ab+ who were incorrectly categorized, set back to 0.
recat <- single[
which(single %in% diagnosis.table[diagnosis.table$group == 1,"Random_ID"])]
diagnosis.table[diagnosis.table$Random_ID %in% recat,"group"] <- 0
colnames(diagnosis.table) <- c("Random_ID","final.group")
# merge final group category with all results
allresults <- merge(allresults,diagnosis.table,by="Random_ID")
# make categorical variable for final group
# BELOW DOES NOT WORK - WILL NEED TO FIX
#allresults$final.group <- plyr::revalue(allresults$final.group,c(0 = "Negative", 1 = "Single ab positive",2 = "Multiple ab positive",3 ="T1D"))
# Merge the diagnosis back into the full table.
alldata <- merge(alldata,diagnosis.table,by = "Random_ID")
#-------------------------------------------------------------------------------
# pull out T1D - if they have T1D at any time point, they are in the T1D group
t1d <- alldata[alldata$T1D == "Yes",]
t1d <- t1d[order(t1d$Random_ID, t1d$Draw_Date),]
# pull out nonT1D
nont1d <- alldata[alldata$T1D != "Yes",]
nont1d <- nont1d[order(nont1d$Random_ID, nont1d$Draw_Date),]
# total of 132 subjects, 15 in T1D and 117 nonT1D
# counting number of INS ratios and proinsulin ratios per person
a <- nont1d %>% group_by(Random_ID) %>% filter(!is.na(Proinsulin_pM_L)) %>% summarize(count=n())
# range from 1 proinsulin ratio to 9
b <- nont1d %>% group_by(Random_ID) %>% filter(!is.na(U_MplusU_Ratio_Zen)) %>% summarize(count=n())
# range rom 1 INS ratio to 3
# spaghetti plots of outcomes
alldata <- alldata[order(alldata$Random_ID,alldata$Draw_Date),]
alldata$time <- alldata$Draw_Date - alldata$Draw_Date[1]
units(alldata$time) <- "days"
alldata$time <- alldata$Draw_Date - alldata$Draw_Date[1]
# BELOW DOES NOT WORK BECAUSE IT IS FINDING THE FIRST DRAW DATE ACROSS ALL PATIENTS!
alldata$time <- alldata %>% group_by(Random_ID) %<% alldata$Draw_Date - alldata$Draw_Date[1]
#library(sqldf)
library(dplyr)
# BELOW DOES NOT WORK BECAUSE IT IS FINDING THE FIRST DRAW DATE ACROSS ALL PATIENTS!
alldata$time <- alldata %>% group_by(Random_ID) %>% alldata$Draw_Date - alldata$Draw_Date[1]
# BELOW DOES NOT WORK BECAUSE IT IS FINDING THE FIRST DRAW DATE ACROSS ALL PATIENTS!
alldata$first <- alldata %>% group_by(Random_ID) %>% first(Draw_Date)
# spaghetti plots of outcomes
alldata <- alldata[order(alldata$Random_ID,alldata$Draw_Date),]
# BELOW DOES NOT WORK BECAUSE IT IS FINDING THE FIRST DRAW DATE ACROSS ALL PATIENTS!
alldata$first <- alldata %>% group_by(Random_ID) %>% first(Draw_Date)
# BELOW DOES NOT WORK BECAUSE IT IS FINDING THE FIRST DRAW DATE ACROSS ALL PATIENTS!
alldata$first <- alldata %>% group_by(Random_ID) %>% first(alldata$Draw_Date)
View(alldata)
View(alldata)
alldata$first <- mdy_hm(as.character(alldata$first))
alldata$first <- mdy(as.character(alldata$first))
# BELOW DOES NOT WORK BECAUSE IT IS FINDING THE FIRST DRAW DATE ACROSS ALL PATIENTS!
alldata$first <- alldata %>% group_by(Random_ID) %>% first(alldata$Draw_Date)
alldata$first <- mdy(as.character(alldata$first))
# BELOW DOES NOT WORK BECAUSE IT IS FINDING THE FIRST DRAW DATE ACROSS ALL PATIENTS!
alldata$first <- alldata %>% group_by(Random_ID) %>% first(alldata$Draw_Date)
