# calculate proinsulin/Cpep ratio
keep_long$Pro_pep <- keep_long$Proinsulin_pM_L/keep_long$PEP0_pM_L*100
# merge  datasets
alldata <- merge(keep_ppt,keep_long,by="Random_ID",all.x=F,all.y=F)
# first code each antibody as positive negative
for(i in 1:nrow(alldata)){
###coding for miaa
a <-ifelse(is.na(alldata$mIAA[i]),
NA,
ifelse(alldata$mIAA[i] <= 0.01, 0, 1)
)
alldata$miaa_cat[i]<- a
###coding for first form of gad65
b <-ifelse(is.na(alldata$GAD65[i]),
NA,
ifelse(alldata$GAD65[i] <= 0.032, 0, 1)
)
alldata$gad65_cat[i]<- b
###coding for second form of gad65
c<-ifelse(is.na(alldata$GAD65H[i]),
NA,
ifelse(alldata$GAD65H[i] <= 20, 0, 1)
)
alldata$gad65h_cat[i]<- c
###coding for first form of ica512/ia2
d<-ifelse(is.na(alldata$ICA512[i]),
NA,
ifelse(alldata$ICA512[i] <= 0.049, 0, 1)
)
alldata$ica512_cat[i]<- d
###coding for second form of ica512/ia2
e<-ifelse(is.na(alldata$IA_2H[i]),
NA,
ifelse(alldata$IA_2H[i] <= 5, 0, 1)
)
alldata$ia2h_cat[i]<- e
###coding for znt8
f<-ifelse(is.na(alldata$ZnT8[i]),
NA,
ifelse(alldata$ZnT8[i] <= 0.02, 0, 1)
)
alldata$znt8_cat[i]<- f
}
#####combining both forms of gad65 tests
for(i in 1:nrow(alldata)){
test <- sum(alldata$ica512_cat[i],alldata$ia2h_cat[i],na.rm=TRUE)
de <- ifelse(is.na(alldata$ica512_cat[i]) & is.na(alldata$ia2h_cat[i]),
NA,
ifelse(test>=1,1,0))
alldata$ica512_ia2_cat[i]<- de
test2 <- sum(alldata$gad65_cat[i],alldata$gad65h_cat[i],na.rm=TRUE)
bc <- ifelse(is.na(alldata$gad65_cat[i]) & is.na(alldata$gad65h_cat[i]),
1,
ifelse(test2>=1,1,0))
alldata$GAD65_combo_cat[i]<- bc
}
# if all ab results missing, delete the record
alldata <- alldata[!is.na(alldata$mIAA) | !is.na(alldata$miaa_cat) | !is.na(alldata$ica512_ia2_cat),]
# 36 records deleted
# check if anyone is missing GAD, ICA/IA2, or mIAA
missing <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
write.csv(missing,file="missing.csv")
# get rid of visits with missing mIAA data
alldata <- alldata[!is.na(alldata$GAD65_combo_cat) & !is.na(alldata$miaa_cat) & !is.na(alldata$ica512_ia2_cat),]
# 40 records deleted
# calculate number of positive ab at each visit
for(i in 1:nrow(alldata)){
alldata$numpos[i] <- sum(alldata$ica512_ia2_cat[i],alldata$GAD65_combo_cat[i],alldata$miaa_cat[i],alldata$znt8_cat[i],na.rm=T)
}
# need to find out if anyone is missing proinsulin ratio at all visits
sortds <- alldata[order(alldata$Random_ID,desc(alldata$Proinsulin_pM_L)),]
hasproins <- sortds %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
a <- hasproins[is.na(hasproins$Proinsulin_pM_L),]
a <- a[,1]
a$flag <- rep(1,nrow(a))
nrow(a)
# 12 subjects missing proinsulin - need to merge this back with original dataset and take those people out
# keep only those IDs that are in both dataframes
alldata <- merge(alldata,a,all.x=TRUE,by="Random_ID")
alldata <- alldata[is.na(alldata$flag),]
# who is missing T1D data?
missingt1d <- alldata[is.na(alldata$T1D),]
# no one is missing t1d status
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
# Aggregate diagnosis table taking the maximum value.
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
# Find the single ab+ who were incorrectly categorized, set back to 0.
recat <- single[
which(single %in% diagnosis.table[diagnosis.table$group == 1,"Random_ID"])]
diagnosis.table[diagnosis.table$Random_ID %in% recat,"group"] <- 0
colnames(diagnosis.table) <- c("Random_ID","final.group")
# merge final group category with all results
allresults <- merge(allresults,diagnosis.table,by="Random_ID")
# make categorical variable for final group
allresults$final.group[allresults$final.group==0] <- "Negative"
allresults$final.group[allresults$final.group==1] <- "Single ab positive"
allresults$final.group[allresults$final.group==2] <- "Multiple ab positive"
allresults$final.group[allresults$final.group==3] <- "T1D"
# Merge the diagnosis back into the full table.
alldata <- merge(alldata,diagnosis.table,by = "Random_ID")
#-------------------------------------------------------------------------------
# pull out T1D - if they have T1D at any time point, they are in the T1D group
t1d <- alldata[alldata$T1D == "Yes",]
t1d <- t1d[order(t1d$Random_ID, t1d$Draw_Date),]
# pull out nonT1D
nont1d <- alldata[alldata$T1D != "Yes",]
nont1d <- nont1d[order(nont1d$Random_ID, nont1d$Draw_Date),]
# total of 132 subjects, 15 in T1D and 117 nonT1D
# counting number of INS ratios and proinsulin ratios per person
a <- nont1d %>% group_by(Random_ID) %>% filter(!is.na(Proinsulin_pM_L)) %>% summarize(count=n())
# range from 1 proinsulin ratio to 9
b <- nont1d %>% group_by(Random_ID) %>% filter(!is.na(U_MplusU_Ratio_Zen)) %>% summarize(count=n())
# range from 1 INS ratio to 3
# find the first draw date
alldata <- alldata[order(alldata$Random_ID,alldata$Draw_Date),]
temp <- aggregate(alldata$Draw_Date,by=list(alldata$Random_ID),min)
names(temp) <- c("Random_ID","first_date")
temp$first_date <- as.Date(temp$first_date)
alldata <- merge(alldata,temp,by = "Random_ID")
alldata$Draw_Date <- as.Date(alldata$Draw_Date)
alldata$time <- alldata$Draw_Date - alldata$first_date
alldata$years <- alldata$time/365.25
# check range of years for non-missing pro-pep
a <- alldata[!is.na(alldata$Pro_pep),]
hist(as.numeric(a$years))
b <- alldata[!is.na(alldata$U_MplusU_Ratio_Zen),]
hist(as.numeric(b$years))
# spaghetti plots of outcomes
qplot(years,Pro_pep,data=alldata,group=Random_ID,color=group,geom="line")
qplot(years,U_MplusU_Ratio_Zen,data=alldata,group=Random_ID,color=group,geom="line")
View(alldata)
View(alldata)
alldata$timec[alldata$final.group==3] <- alldata$Draw_Date[alldata$final.group==3] - alldata$Date_of_Diagnosis[alldata$final.group==3]
class(alldata$Date_of_Diagnosis)
class(alldata$Draw_Date)
alldata$timec[alldata$final.group==3] <- alldata$Draw_Date[alldata$final.group==3] - as.Date(alldata$Date_of_Diagnosis[alldata$final.group==3])
alldata$Date_of_Diagnosis <- as.Date(alldata$Date_of_Diagnosis)
#library(sqldf)
library(dplyr)
library(lubridate)
library(graphics)
library(ggplot2)
# read in the data
longitudinal_visit_info <- read.csv("\\\\ucdenver.pvt\\som-home\\pylell\\BDC\\Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\longitudinal 091818.csv")
ParticipantInfo_risk <- read.csv("\\\\ucdenver.pvt\\som-home\\pylell\\BDC\\Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\Participant Info risk 091818.csv")
# get rid of duplicates
ParticipantInfo_risk <- unique(ParticipantInfo_risk)
# no duplicates
# merge participant info and longitudinal data
keep_ppt <- data.frame(ParticipantInfo_risk$TrialNet,
ParticipantInfo_risk$T1D,
ParticipantInfo_risk$Date.of.Diagnosis)
colnames(keep_ppt) <- c("Random_ID","T1D","Date_of_Diagnosis")
keep_long <- data.frame(longitudinal_visit_info$PID,
longitudinal_visit_info$Draw.Date,
longitudinal_visit_info$GAD65,
longitudinal_visit_info$GAD65H,
longitudinal_visit_info$ICA512,
longitudinal_visit_info$IA2H,
longitudinal_visit_info$mIAA,
longitudinal_visit_info$ZnT8,
longitudinal_visit_info$ICA,
longitudinal_visit_info$U.per.MplusU.Ratio.Zen,
longitudinal_visit_info$ECL_GADA,
longitudinal_visit_info$ECL_IA.2A,
longitudinal_visit_info$ECL_IAA,
longitudinal_visit_info$Proinsulin_pM.L,
longitudinal_visit_info$PEP0)
colnames(keep_long) <- c("Random_ID","Draw_Date","GAD65","GAD65H","ICA512","IA_2H","mIAA","ZnT8","ICA","U_MplusU_Ratio_Zen","ECL_GADA","ECL_IA2A","ECL_IAA","Proinsulin_pM_L","PEP0")
# convert draw date to date
#keep_long$Draw_Date <- mdy_hms(as.character(keep_long$Draw_Date))
#keep_long$Draw_Date <- as.POSIXlt(as.character(keep_long$Draw_Date),format="%m%d%Y %H%M")
keep_long$Draw_Date <- mdy_hm(as.character(keep_long$Draw_Date))
# calculate fasting Cpeptide in pM/L
keep_long$PEP0_pM_L <- keep_long$PEP0*331.09
# calculate proinsulin/Cpep ratio
keep_long$Pro_pep <- keep_long$Proinsulin_pM_L/keep_long$PEP0_pM_L*100
# merge  datasets
alldata <- merge(keep_ppt,keep_long,by="Random_ID",all.x=F,all.y=F)
# first code each antibody as positive negative
for(i in 1:nrow(alldata)){
###coding for miaa
a <-ifelse(is.na(alldata$mIAA[i]),
NA,
ifelse(alldata$mIAA[i] <= 0.01, 0, 1)
)
alldata$miaa_cat[i]<- a
###coding for first form of gad65
b <-ifelse(is.na(alldata$GAD65[i]),
NA,
ifelse(alldata$GAD65[i] <= 0.032, 0, 1)
)
alldata$gad65_cat[i]<- b
###coding for second form of gad65
c<-ifelse(is.na(alldata$GAD65H[i]),
NA,
ifelse(alldata$GAD65H[i] <= 20, 0, 1)
)
alldata$gad65h_cat[i]<- c
###coding for first form of ica512/ia2
d<-ifelse(is.na(alldata$ICA512[i]),
NA,
ifelse(alldata$ICA512[i] <= 0.049, 0, 1)
)
alldata$ica512_cat[i]<- d
###coding for second form of ica512/ia2
e<-ifelse(is.na(alldata$IA_2H[i]),
NA,
ifelse(alldata$IA_2H[i] <= 5, 0, 1)
)
alldata$ia2h_cat[i]<- e
###coding for znt8
f<-ifelse(is.na(alldata$ZnT8[i]),
NA,
ifelse(alldata$ZnT8[i] <= 0.02, 0, 1)
)
alldata$znt8_cat[i]<- f
}
#####combining both forms of gad65 tests
for(i in 1:nrow(alldata)){
test <- sum(alldata$ica512_cat[i],alldata$ia2h_cat[i],na.rm=TRUE)
de <- ifelse(is.na(alldata$ica512_cat[i]) & is.na(alldata$ia2h_cat[i]),
NA,
ifelse(test>=1,1,0))
alldata$ica512_ia2_cat[i]<- de
test2 <- sum(alldata$gad65_cat[i],alldata$gad65h_cat[i],na.rm=TRUE)
bc <- ifelse(is.na(alldata$gad65_cat[i]) & is.na(alldata$gad65h_cat[i]),
1,
ifelse(test2>=1,1,0))
alldata$GAD65_combo_cat[i]<- bc
}
# if all ab results missing, delete the record
alldata <- alldata[!is.na(alldata$mIAA) | !is.na(alldata$miaa_cat) | !is.na(alldata$ica512_ia2_cat),]
# 36 records deleted
# check if anyone is missing GAD, ICA/IA2, or mIAA
missing <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
write.csv(missing,file="missing.csv")
# get rid of visits with missing mIAA data
alldata <- alldata[!is.na(alldata$GAD65_combo_cat) & !is.na(alldata$miaa_cat) & !is.na(alldata$ica512_ia2_cat),]
# 40 records deleted
# calculate number of positive ab at each visit
for(i in 1:nrow(alldata)){
alldata$numpos[i] <- sum(alldata$ica512_ia2_cat[i],alldata$GAD65_combo_cat[i],alldata$miaa_cat[i],alldata$znt8_cat[i],na.rm=T)
}
# need to find out if anyone is missing proinsulin ratio at all visits
sortds <- alldata[order(alldata$Random_ID,desc(alldata$Proinsulin_pM_L)),]
hasproins <- sortds %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
a <- hasproins[is.na(hasproins$Proinsulin_pM_L),]
a <- a[,1]
a$flag <- rep(1,nrow(a))
nrow(a)
# 12 subjects missing proinsulin - need to merge this back with original dataset and take those people out
# keep only those IDs that are in both dataframes
alldata <- merge(alldata,a,all.x=TRUE,by="Random_ID")
alldata <- alldata[is.na(alldata$flag),]
# who is missing T1D data?
missingt1d <- alldata[is.na(alldata$T1D),]
# no one is missing t1d status
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
# Aggregate diagnosis table taking the maximum value.
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
# Find the single ab+ who were incorrectly categorized, set back to 0.
recat <- single[
which(single %in% diagnosis.table[diagnosis.table$group == 1,"Random_ID"])]
diagnosis.table[diagnosis.table$Random_ID %in% recat,"group"] <- 0
colnames(diagnosis.table) <- c("Random_ID","final.group")
# merge final group category with all results
allresults <- merge(allresults,diagnosis.table,by="Random_ID")
# make categorical variable for final group
allresults$final.group[allresults$final.group==0] <- "Negative"
allresults$final.group[allresults$final.group==1] <- "Single ab positive"
allresults$final.group[allresults$final.group==2] <- "Multiple ab positive"
allresults$final.group[allresults$final.group==3] <- "T1D"
# Merge the diagnosis back into the full table.
alldata <- merge(alldata,diagnosis.table,by = "Random_ID")
#-------------------------------------------------------------------------------
# pull out T1D - if they have T1D at any time point, they are in the T1D group
t1d <- alldata[alldata$T1D == "Yes",]
t1d <- t1d[order(t1d$Random_ID, t1d$Draw_Date),]
# pull out nonT1D
nont1d <- alldata[alldata$T1D != "Yes",]
nont1d <- nont1d[order(nont1d$Random_ID, nont1d$Draw_Date),]
# total of 132 subjects, 15 in T1D and 117 nonT1D
# counting number of INS ratios and proinsulin ratios per person
a <- nont1d %>% group_by(Random_ID) %>% filter(!is.na(Proinsulin_pM_L)) %>% summarize(count=n())
# range from 1 proinsulin ratio to 9
b <- nont1d %>% group_by(Random_ID) %>% filter(!is.na(U_MplusU_Ratio_Zen)) %>% summarize(count=n())
# range from 1 INS ratio to 3
# find the first draw date
alldata <- alldata[order(alldata$Random_ID,alldata$Draw_Date),]
temp <- aggregate(alldata$Draw_Date,by=list(alldata$Random_ID),min)
names(temp) <- c("Random_ID","first_date")
temp$first_date <- as.Date(temp$first_date)
alldata <- merge(alldata,temp,by = "Random_ID")
alldata$Draw_Date <- as.Date(alldata$Draw_Date)
alldata$time <- alldata$Draw_Date - alldata$first_date
alldata$years <- alldata$time/365.25
# check range of years for non-missing pro-pep
a <- alldata[!is.na(alldata$Pro_pep),]
hist(as.numeric(a$years))
b <- alldata[!is.na(alldata$U_MplusU_Ratio_Zen),]
hist(as.numeric(b$years))
alldata$test <- as.Date(alldata$Date_of_Diagnosis)
alldata$test <- as.Date(as.character(alldata$Date_of_Diagnosis))
alldata$test <- as.Date(mdy(alldata$Date_of_Diagnosis))
# now need to determine which INS ratio/proinsulin ratio to use for cross-sectional analyses
# T1D: results closest to T1D onset (i.e., within 2 months)
alldata$Date_of_Diagnosis <- as.Date(mdy(alldata$Date_of_Diagnosis))
alldata$timec[alldata$final.group==3] <- alldata$Draw_Date[alldata$final.group==3] - alldata$Date_of_Diagnosis[alldata$final.group==3]
View(alldata[c("final.group","Draw_Date","Date_of_Diagnosis","timec")])
t1d <- alldata[alldata$T1D == "Yes",]
t1d <- t1d[order(t1d$Random_ID, t1d$Draw_Date),]
View(t1d[c("final.group","Draw_Date","Date_of_Diagnosis","timec")])
View(t1d[c("Random_ID","final.group","Draw_Date","Date_of_Diagnosis","timec")])
View(t1d[c("Random_ID","final.group","Draw_Date","Date_of_Diagnosis","timec","Pro_pep","U_MplusU_Ratio_Zen")])
t1d_select_pro <- t1d[!is.na(t1d$Pro_pep)]
t1d_select_pro <- t1d[!is.na(t1d$Pro_pep),]
View(t1d_select_pro[c("Random_ID","final.group","Draw_Date","Date_of_Diagnosis","timec","Pro_pep")])
nrow(unique(t1d_select_pro$Random_ID))
length(unique(t1d_select_pro$Random_ID))
t1d_select_pro <- t1d_select_pro[t1d_select_pro$timec<=60,]
length(unique(t1d_select_pro$Random_ID))
View(t1d_select_pro[c("Random_ID","final.group","Draw_Date","Date_of_Diagnosis","timec","Pro_pep")])
t1d_select_pro <- t1d_select_pro[t1d_select_pro$timec<=60,]
View(t1d_select_pro[c("Random_ID","final.group","Draw_Date","Date_of_Diagnosis","timec","Pro_pep")])
t1d_select_pro <- t1d[!is.na(t1d$Pro_pep),]
length(unique(t1d_select_pro$Random_ID))
t1d_select_pro <- t1d_select_pro[abs(t1d_select_pro$timec)<=60,]
length(unique(t1d_select_pro$Random_ID))
View(t1d_select_pro[c("Random_ID","final.group","Draw_Date","Date_of_Diagnosis","timec","Pro_pep")])
t1d_select_pro <- t1d[!is.na(t1d$Pro_pep),]
length(unique(t1d_select_pro$Random_ID))
t1d_select_pro <- t1d_select_pro[abs(t1d_select_pro$timec)<=90,]
length(unique(t1d_select_pro$Random_ID))
t1d_select_ins <- t1d[!is.na(t1d$U_MplusU_Ratio_Zen)]
t1d_select_ins <- t1d[!is.na(t1d$U_MplusU_Ratio_Zen),]
length(unique(t1d_select_ins$Random_ID))
t1d_select_ins <- t1d_select_ins[abs(t1d_select_ins$timec)<=60,]
length(unique(t1d_select_ins$Random_ID))
neg_select_pro <- neg[!is.na(neg$Pro_pep),]
# negative: use most recent
neg <- alldata[alldata$final.group==0,]
neg <- neg[order(neg$Random_ID, neg$Draw_Date),]
# pull out records with nonmissing propep
neg_select_pro <- neg[!is.na(neg$Pro_pep),]
View(neg[c("Random_ID","final.group","Draw_Date","Pro_pep")])
View(neg_select_pro[c("Random_ID","final.group","Draw_Date","Pro_pep")])
temp <- aggregate(neg_select_pro$Draw_Date,by=list(neg_select_pro$Random_ID),max)
View(longitudinal_visit_info)
View(temp)
View(temp)
names(temp) <- c("Random_ID","most_recent_draw")
temp$most_recent_draw <- as.Date(temp$most_recent_draw)
neg_select_pro <- merge(neg_select_pro,temp,by = "Random_ID")
View(neg_select_pro[c("Random_ID","final.group","Draw_Date","Pro_pep","most_recent_draw")])
length(unique(neg_select_pro$Random_ID))
neg_select_pro <- neg_select_pro[neg_select_pro$Draw_Date==neg_select_pro$most_recent_draw,]
length(unique(neg_select_pro$Random_ID))
View(neg_select_pro[c("Random_ID","final.group","Draw_Date","Pro_pep","most_recent_draw")])
neg_select_ins <-neg[!is.na(neg$U_MplusU_Ratio_Zen),]
temp <- aggregate(neg_select_ins$Draw_Date,by=list(neg_select_ins$Random_ID),max)
names(temp) <- c("Random_ID","most_recent_draw")
temp$most_recent_draw <- as.Date(temp$most_recent_draw)
neg_select_ins <- merge(neg_select_ins,temp,by = "Random_ID")
View(neg_select_ins[c("Random_ID","final.group","Draw_Date","U_MplusU_Ratio_Zen","most_recent_draw")])
neg_select_ins <-neg[!is.na(neg$U_MplusU_Ratio_Zen),]
View(neg_select_ins[c("Random_ID","final.group","Draw_Date","U_MplusU_Ratio_Zen")])
temp <- aggregate(neg_select_ins$Draw_Date,by=list(neg_select_ins$Random_ID),max)
names(temp) <- c("Random_ID","most_recent_draw")
temp$most_recent_draw <- as.Date(temp$most_recent_draw)
neg_select_ins <- merge(neg_select_ins,temp,by = "Random_ID")
View(neg_select_ins[c("Random_ID","final.group","Draw_Date","U_MplusU_Ratio_Zen")])
neg_select_ins <- neg_select_ins[neg_select_ins$Draw_Date==neg_select_ins$most_recent_draw,]
View(neg_select_ins[c("Random_ID","final.group","Draw_Date","U_MplusU_Ratio_Zen","most_recent_draw")])
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
View(diagnosis.table)
View(diagnosis.table)
help("aggregate")
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
View(diagnosis.table)
View(diagnosis.table)
diagnosis.table %>%
group_by(Random_ID) %>%
summarize(max_group = max(group))
View(diagnosis.table)
View(diagnosis.table)
diagnosis.table <-diagnosis.table %>% group_by(Random_ID) %>% summarize(max_group = max(group))
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
# Aggregate diagnosis table taking the maximum value.
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
View(t1d_select_pro)
View(alldata)
View(alldata)
View(mult[c("Random_ID","group","final.group","Draw_Date"")])
# single ab positive: results at time of confirmation
# if anyone has more than one set of results that meets the above criteria, take the most recent result
# calculate date between INS ratio and date of dx
for(i in 1:nrow(alldata)) {
alldata$datediff[i] <- abs(as.numeric(alldata$Date_of_Diagnosis[i])-as.numeric(alldata$Draw_Date[i]))
}
#write.csv(alldata, file = "fulldatains.csv")
View(mult[c("Random_ID","group","final.group","Draw_Date")])
mult <- alldata[alldata$final.group==2,]
mult <- mult[order(mult$Random_ID, mult$Draw_Date),]
View(mult[c("Random_ID","group","final.group","Draw_Date")])
mult_find_first <- mult[mult$group=="Multiple ab positive",]
View(missing)
View(mult_find_first)
View(mult_find_first)
View(mult_find_first[c("Random_ID","group","final.group","Draw_Date")])
mult_find_first <- aggregate(mult_find_first$Draw_Date,by=list(mult_find_first$Random_ID),min)
View(mult_find_first[c("Random_ID","group","final.group","Draw_Date")])
View(mult_find_first)
View(mult_find_first)
mult <- merge(mult,mult_find_first,by="Random_ID")
names(mult_find_first) <- c("Random_ID","first_mult_date")
mult <- merge(mult,mult_find_first,by="Random_ID")
View(mult[c("Random_ID","group","final.group","Draw_Date","first_mult_date")])
mult$timec <- mult$Draw_Date - mult$first_mult_date
View(mult[c("Random_ID","group","final.group","Draw_Date","first_mult_date","timec")])
mult_select_pro <- mult[!is.na(mult$Pro_pep),]
length(unique(mult_select_pro$Random_ID))
mult_select_pro <- mult_select_pro[abs(mult_select_pro$timec)<=60,]
length(unique(mult_select_pro$Random_ID))
alldata$Date_of_Diagnosis <- as.Date(mdy(alldata$Date_of_Diagnosis))
alldata$timec[alldata$final.group==3] <- alldata$Draw_Date[alldata$final.group==3] - alldata$Date_of_Diagnosis[alldata$final.group==3]
t1d <- alldata[alldata$T1D == "Yes",]
t1d <- t1d[order(t1d$Random_ID, t1d$Draw_Date),]
# pull out records with non-missing Pro_pep
t1d_select_pro <- t1d[!is.na(t1d$Pro_pep),]
length(unique(t1d_select_pro$Random_ID))
allpro <- rbind(t1d_select_pro,neg_select_pro,mult_select_pro)
