# correct group2 variable in allpro
allpro$group2 <- ifelse(allpro$final.group=="T1D" | allpro$final.group=="Multiple ab positive","T1D/multiple ab pos",allpro$final.group)
nneg <- length(unique(allpro[allpro$final.group=="Negative",]$Random_ID))
nsing <- length(unique(allpro[allpro$final.group=="Single ab positive",]$Random_ID))
nmult <- length(unique(allpro[allpro$final.group=="Multiple ab positive",]$Random_ID))
# need to update final.group variable using what is in allpro
#correct_group <- subset(allpro, select =c(Random_ID,final.group))
#tab1data <- subset(tab1data, select = -c(final.group))
#tab1data <- merge(tab1data,correct_group,by="Random_ID",all=TRUE)
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
# for table 1, need the draw date corresponding to the proins used in cross sectional analyses
datepro <- allpro[c("Random_ID","Draw_Date")]
names(datepro) <- c("Random_ID","Date_proins")
getdates <- datepro
# keep the latest date to find A1c and age
getdates$tab1_date <- pmax(getdates$Date_proins,na.rm=TRUE)
getdates$tab1flag <- rep(1,nrow(getdates))
getdates$Draw_Date <- getdates$tab1_date
tab1data <- merge(alldata,getdates,by=c("Random_ID","Draw_Date"))
tab1data$age <- floor(tab1data$DOB %--% tab1data$Draw_Date / dyears(1))
label(tab1data$Pro_pep)="Proinsulin ratio"
# compare proinsulin ratios between T1D, Ab-, single Ab+, multiple Ab+
# unadjusted comparisons
tab_pro <- final_table(allpro,'Pro_pep',group=as.factor(allpro$final.group),margin=2,single=0,ron=2)
tab_pro2 <- final_table(allpro,'Pro_pep',group=as.factor(allpro$group2),margin=2,single=0,ron=2)
tab_pro3 <- final_table(allpro[allpro$final.group != "T1D",],'Pro_pep',
group=as.factor(allpro[allpro$final.group != "T1D",]$final.group),margin=2,single=0,ron=2)
# adjust for age, sex, and BMI
allpro$l_Pro_pep=log(allpro$Pro_pep)
# lm.pro = with(allpro, lm(Pro_pep ~ as.factor(final.group)))
# summary(lm.pro)
# anova(lm.pro)
# plot(lm.pro)
# lm.pro <- aov(lm.pro)
# summary(lm.pro)
# anova(lm.pro)
# TukeyHSD(lm.pro)
# log transformed
lm.pro = with(allpro, lm(Pro_pep ~ as.factor(group2) + age + Gender + BMI))
summary(lm.pro)
anova(lm.pro)
lm.pro <- aov(lm.pro)
summary(lm.pro)
anova(lm.pro)
pval_final.group <- anova(lm.pro)[1,5]
diffs_final.group <- TukeyHSD(lm.pro, which = "as.factor(final.group)")
# do proinsulin ratios correlate with biochemical and ECL antibody levels
corr_pro <- rcorr(as.matrix(allpro[, c( "Pro_pep","gadz","ia2z","mIAA","ZnT8","ICA",
"ECL_GADA","ECL_IA2A","ECL_IAA")])
,type = "spearman")
corr_pro <- flattenCorrMatrix(corr_pro$r, corr_pro$P)
corr_pro <- corr_pro[corr_pro$row=="Pro_pep",]
# write cross-sectional dataset for Taylor
write.csv(allpro,file="S:\\Shared Projects\\Laura\\BDC\\Projects\\Andrea Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\allpro.csv")
# partial correlations adjusted for age, sex, gender
#blah <- na.omit(remove_all_labels(allpro))
#corr_pro_part <- pcor.test(x=blah$Pro_pep,y=blah[,c("gadz","ia2z","mIAA","ZnT8","ICA","ECL_GADA","ECL_IA2A","ECL_IAA")],
#                           z=blah[,c("age","BMI")])
# table 1 - include age at last visit, gender, race/eth, DPT1 score, HLA, A1c
label(tab1data$age)="Age (yrs)"
label(tab1data$HLA)="HLA"
label(tab1data$HbA1c)="HbA1c (%)"
label(tab1data$race_eth)="Race/ethnicity"
tab1data$DR3DR4 <- as.factor(tab1data$DR3DR4)
label(tab1data$DR3DR4)="DR3 DR4"
table(allpro$final.group,allpro$group2)
table(tab1data$final.group,tab1data$group2)
correct_group <- subset(allpro, select =c(Random_ID,final.group))
tab1data <- subset(tab1data, select = -c(final.group))
tab1data <- merge(tab1data,correct_group,by="Random_ID",all=TRUE)
tab1data$group2 <- as.factor(ifelse(tab1data$final.group=="T1D" | tab1data$final.group=="Multiple ab positive","T1D/multiple ab pos",tab1data$final.group))
table(tab1data$final.group,tab1data$group2)
help("coord_fixed")
library(dplyr)
library(lubridate)
library(graphics)
library(ggplot2)
library(Hmisc)
#library(Table1)
library(knitr)
library(nlme)
library(ggplot2)
library(tidyr)
#library(ppcor)
#library(sjlabelled)
library(lme4)
library(bootpredictlme4)
# read in the data
longitudinal_visit_info <- read.csv("S:/Shared Projects/Laura/BDC/Projects/Andrea Steck/Trialnet progressors analysis/Fourth analysis - demethylated insulin with updated dataset/Data/longitudinal 051019.csv")
ParticipantInfo_risk <- read.csv("S:/Shared Projects/Laura/BDC/Projects/Andrea Steck/Trialnet progressors analysis/Fourth analysis - demethylated insulin with updated dataset/Data/Participant Info risk 051019.csv",na.strings = c("NA"," ","","      "))
source("C:\\Users\\pylell\\Documents\\GitHub\\General-code\\temp_table1.r")
source("C:\\Users\\pylell\\Documents\\GitHub\\General-code\\01_functions.r")
# get rid of duplicates
ParticipantInfo_risk <- unique(ParticipantInfo_risk)
# no duplicates
obslong <- nrow(longitudinal_visit_info)
nppt <- nrow(ParticipantInfo_risk)
# merge participant info and longitudinal data
keep_ppt <- data.frame(ParticipantInfo_risk$TrialNet,
ParticipantInfo_risk$T1D,
ParticipantInfo_risk$Date.of.Diagnosis,
ParticipantInfo_risk$DOB, ParticipantInfo_risk$Gender, ParticipantInfo_risk$Race, ParticipantInfo_risk$Ethnicity,
ParticipantInfo_risk$DPT1.Risk.Score,ParticipantInfo_risk$HLA, ParticipantInfo_risk$DR3,ParticipantInfo_risk$DR4)
colnames(keep_ppt) <- c("Random_ID","T1D","Date_of_Diagnosis","DOB","Gender",
"Race","Ethnicity","DPT1Risk","HLA","DR3","DR4")
keep_long <- data.frame(longitudinal_visit_info$PID,
longitudinal_visit_info$Draw.Date,
longitudinal_visit_info$GAD65,
longitudinal_visit_info$GAD65H,
longitudinal_visit_info$ICA512,
longitudinal_visit_info$IA2H,
longitudinal_visit_info$mIAA,
longitudinal_visit_info$ZnT8,
longitudinal_visit_info$ICA,
longitudinal_visit_info$ECL_GADA,
longitudinal_visit_info$ECL_IA.2A,
longitudinal_visit_info$ECL_IAA,
longitudinal_visit_info$Proinsulin_pM.L,
longitudinal_visit_info$PEP0,
longitudinal_visit_info$HbA1c,
longitudinal_visit_info$GLU0,
longitudinal_visit_info$GLU30,
longitudinal_visit_info$GLU60,
longitudinal_visit_info$GLU90,
longitudinal_visit_info$GLU120,
longitudinal_visit_info$Height.cm,
longitudinal_visit_info$Weight.kg)
colnames(keep_long) <- c("Random_ID","Draw_Date","GAD65","GAD65H","ICA512","IA_2H","mIAA","ZnT8","ICA","ECL_GADA","ECL_IA2A","ECL_IAA","Proinsulin_pM_L","PEP0","HbA1c","GLU0","GLU30","GLU60","GLU90","GLU120","Height.cm","Weight.kg")
# convert draw date to date
#keep_long$Draw_Date <- mdy_hms(as.character(keep_long$Draw_Date))
#keep_long$Draw_Date <- as.POSIXlt(as.character(keep_long$Draw_Date),format="%m%d%Y %H%M")
keep_long$Draw_Date <- mdy_hm(as.character(keep_long$Draw_Date))
keep_ppt$DOB <- mdy(as.character(keep_ppt$DOB))
# calculate fasting Cpeptide in pM/L
keep_long$PEP0_pM_L <- keep_long$PEP0*331.09
# calculate proinsulin/Cpep ratio
keep_long$Pro_pep <- keep_long$Proinsulin_pM_L/keep_long$PEP0_pM_L*100
# merge  datasets
alldata <- merge(keep_ppt,keep_long,by="Random_ID",all.x=F,all.y=F)
N <- length(unique(alldata$Random_ID))
# fix gender coding female Female   male   Male
alldata$Gender[alldata$Gender=='female'] <- "Female"
alldata$Gender[alldata$Gender=='male'] <- "Male"
alldata$Gender <- droplevels(alldata$Gender)
# new variable for DR3/DR4
alldata$DR3DR4[alldata$DR3=="PRESENT" & alldata$DR4=="PRESENT"] <- "PRESENT"
alldata$DR3DR4[!(alldata$DR3=="PRESENT" & alldata$DR4=="PRESENT")] <- "ABSENT"
alldata$DR3DR4[is.na(alldata$DR3) & is.na(alldata$DR4)] <- NA
# correct some values per Andrea
alldata$Height.cm[alldata$Draw_Date==as.Date("2008-12-30") & alldata$Random_ID=="146273"] <- 172.5
alldata$Weight.kg[alldata$Draw_Date==as.Date("2008-12-30") & alldata$Random_ID=="146273"] <- 57
alldata$Height.cm[alldata$Draw_Date==as.Date("2008-11-26") & alldata$Random_ID=="146513"] <- 164.6
alldata$Weight.kg[alldata$Draw_Date==as.Date("2008-11-26") & alldata$Random_ID=="146513"] <- 52.9
alldata$Height.cm[alldata$Draw_Date==as.Date("2013-10-14") & alldata$Random_ID=="148088"] <- 161.3
alldata$Weight.kg[alldata$Draw_Date==as.Date("2013-10-14") & alldata$Random_ID=="148088"] <- 67
alldata$Height.cm[alldata$Draw_Date==as.Date("2010-08-07") & alldata$Random_ID=="149118"] <- 156.9
alldata$Weight.kg[alldata$Draw_Date==as.Date("2010-08-07") & alldata$Random_ID=="149118"] <- 61.8
alldata$Height.cm[alldata$Draw_Date==as.Date("2009-04-20") & alldata$Random_ID=="150283"] <- 184.6
alldata$Weight.kg[alldata$Draw_Date==as.Date("2009-04-20") & alldata$Random_ID=="150283"] <- 125.4
alldata$Height.cm[alldata$Draw_Date==as.Date("2015-04-06") & alldata$Random_ID=="237376"] <- 174.9
alldata$Weight.kg[alldata$Draw_Date==as.Date("2015-04-06") & alldata$Random_ID=="237376"] <- 75.39
# calculate BMI
alldata$BMI <- alldata$Weight.kg / ((alldata$Height.cm/100)^2)
#bad <- alldata[alldata$BMI>50,]
#bad <- bad[!is.na(bad$Random_ID),]
#bad <- subset(bad,select=c("Random_ID","Draw_Date","Height.cm","Weight.kg","BMI"))
# combine race/ethnicity
alldata$race_eth <- NA
alldata$race_eth[(alldata$Race=="White" & alldata$Ethnicity=="Non-Hispanic origin")]  <- "NHW"
alldata$race_eth[(alldata$Race=="White" & alldata$Ethnicity=="Non-Hispanic White")] <- "NHW"
alldata$race_eth[(alldata$Race=="White" & alldata$Ethnicity == "Not Hispanic or Latino")] <- "NHW"
alldata$race_eth[alldata$Ethnicity=="Hispanic" | alldata$Ethnicity=="Hispanic or Latino" | alldata$Ethnicity=="Hispanic/Latino/Spanish origin"] <- "Hispanic"
alldata$race_eth[is.na(alldata$race_eth)] <- "Other"
alldata$race_eth <- as.factor(alldata$race_eth)
# first code each antibody as positive negative
for(i in 1:nrow(alldata)){
###coding for miaa
a <-ifelse(is.na(alldata$mIAA[i]),
NA,
ifelse(alldata$mIAA[i] <= 0.01, 0, 1)
)
alldata$miaa_cat[i]<- a
###coding for first form of gad65
b <-ifelse(is.na(alldata$GAD65[i]),
NA,
ifelse(alldata$GAD65[i] <= 0.032, 0, 1)
)
alldata$gad65_cat[i]<- b
###coding for second form of gad65
c<-ifelse(is.na(alldata$GAD65H[i]),
NA,
ifelse(alldata$GAD65H[i] <= 20, 0, 1)
)
alldata$gad65h_cat[i]<- c
###coding for first form of ica512/ia2
d<-ifelse(is.na(alldata$ICA512[i]),
NA,
ifelse(alldata$ICA512[i] <= 0.049, 0, 1)
)
alldata$ica512_cat[i]<- d
###coding for second form of ica512/ia2
e<-ifelse(is.na(alldata$IA_2H[i]),
NA,
ifelse(alldata$IA_2H[i] <= 5, 0, 1)
)
alldata$ia2h_cat[i]<- e
###coding for znt8
f<-ifelse(is.na(alldata$ZnT8[i]),
NA,
ifelse(alldata$ZnT8[i] <= 0.02, 0, 1)
)
alldata$znt8_cat[i]<- f
}
#####combining both forms of gad65 tests
for(i in 1:nrow(alldata)){
test <- sum(alldata$ica512_cat[i],alldata$ia2h_cat[i],na.rm=TRUE)
de <- ifelse(is.na(alldata$ica512_cat[i]) & is.na(alldata$ia2h_cat[i]),
NA,
ifelse(test>=1,1,0))
alldata$ica512_ia2_cat[i]<- de
test2 <- sum(alldata$gad65_cat[i],alldata$gad65h_cat[i],na.rm=TRUE)
bc <- ifelse(is.na(alldata$gad65_cat[i]) & is.na(alldata$gad65h_cat[i]),
1,
ifelse(test2>=1,1,0))
alldata$GAD65_combo_cat[i]<- bc
}
# if all ab results missing, delete the record
misstwo <- alldata[is.na(alldata$mIAA) & is.na(alldata$ica512_ia2_cat),]
alldata <- alldata[!is.na(alldata$mIAA) | !is.na(alldata$miaa_cat) | !is.na(alldata$ica512_ia2_cat),]
# 36 records deleted
# check if anyone is missing GAD, ICA/IA2, or mIAA
missing <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
write.csv(missing,file="missing.csv")
# get rid of visits with missing mIAA data
missmiaa <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
alldata <- alldata[!is.na(alldata$GAD65_combo_cat) & !is.na(alldata$miaa_cat) & !is.na(alldata$ica512_ia2_cat),]
# 40 records deleted
# calculate number of positive ab at each visit
for(i in 1:nrow(alldata)){
alldata$numpos[i] <- sum(alldata$ica512_ia2_cat[i],alldata$GAD65_combo_cat[i],alldata$miaa_cat[i],alldata$znt8_cat[i],na.rm=T)
}
# calculate z-scores for GAD and IA2
alldata$gad65z <- (alldata$GAD65 - mean(alldata$GAD65,na.rm = TRUE))/sd(alldata$GAD65,na.rm = TRUE)
alldata$gad65hz <- (alldata$GAD65H - mean(alldata$GAD65H,na.rm = TRUE))/sd(alldata$GAD65H,na.rm = TRUE)
alldata$gadz <- ifelse(!is.na(alldata$GAD65),alldata$gad65z,alldata$gad65hz)
alldata$ica512z <- (alldata$ICA512 - mean(alldata$ICA512,na.rm = TRUE))/sd(alldata$ICA512,na.rm = TRUE)
alldata$ia2hz <- (alldata$IA_2H - mean(alldata$IA_2H,na.rm = TRUE))/sd(alldata$IA_2H,na.rm = TRUE)
alldata$ia2z <- ifelse(!is.na(alldata$ICA512),alldata$ica512z,alldata$ia2hz)
# exclude people who do not have a proinsulin ratio
sortds <- alldata[order(alldata$Random_ID,desc(alldata$Pro_pep)),]
hasproins <- sortds %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
a <- hasproins[is.na(hasproins$Pro_pep),]
a <- a[,1]
a$flaga <- rep(1,nrow(a))
# a contains a list of IDs of people missing proins
# people with flaga are missing proins and need to be excluded
exclu <- a[a$flaga==1,]
misspro <- length(unique(exclu$Random_ID))
alldata <- merge(alldata,a,by="Random_ID",all.x=TRUE,all.y=TRUE)
alldata$flaga[is.na(alldata$flaga)] <- 0
alldata <- alldata[alldata$flaga==0,]
# who is missing T1D data?
missingt1d <- alldata[is.na(alldata$T1D),]
# no one is missing t1d status
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
# Aggregate diagnosis table taking the maximum value.
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
# Find the single ab+ who were incorrectly categorized, set back to 0.
recat <- single[
which(single %in% diagnosis.table[diagnosis.table$group == 1,"Random_ID"])]
diagnosis.table[diagnosis.table$Random_ID %in% recat,"group"] <- 0
colnames(diagnosis.table) <- c("Random_ID","final.group")
# make categorical variable for final group
diagnosis.table$final.group[diagnosis.table$final.group==0] <- "Negative"
diagnosis.table$final.group[diagnosis.table$final.group==1] <- "Single ab positive"
diagnosis.table$final.group[diagnosis.table$final.group==2] <- "Multiple ab positive"
diagnosis.table$final.group[diagnosis.table$final.group==3] <- "T1D"
# merge final group category with all results
allresults <- merge(allresults,diagnosis.table,by="Random_ID")
alldata <- merge(alldata,diagnosis.table,by = "Random_ID")
# create new variable for group with T1D and multiple ab combined
alldata$group2 <- as.factor(ifelse(alldata$final.group=="T1D" | alldata$final.group=="Multiple ab positive","T1D/multiple ab pos",alldata$final.group))
# Merge the diagnosis back into the full table.
#-------------------------------------------------------------------------------
check <- alldata %>% distinct(Random_ID, .keep_all=TRUE)
# counting number of INS ratios and proinsulin ratios per person
#a <- nont1d %>% group_by(Random_ID) %>% filter(!is.na(Proinsulin_pM_L)) %>% summarize(count=n())
# range from 1 proinsulin ratio to 9
#b <- nont1d %>% group_by(Random_ID) %>% filter(!is.na(U_MplusU_Ratio_Zen)) %>% summarize(count=n())
# range from 1 INS ratio to 3
# find the first draw date
alldata <- alldata[order(alldata$Random_ID,alldata$Draw_Date),]
temp <- aggregate(alldata$Draw_Date,by=list(alldata$Random_ID),min)
names(temp) <- c("Random_ID","first_date")
temp$first_date <- as.Date(temp$first_date)
alldata <- merge(alldata,temp,by = "Random_ID")
alldata$Draw_Date <- as.Date(alldata$Draw_Date)
alldata$time <- alldata$Draw_Date - alldata$first_date
alldata$years <- alldata$time/365.25
# spaghetti plots of outcomes
#qplot(years,Pro_pep,data=alldata,group=Random_ID,color=group,geom="line")
#qplot(years,U_MplusU_Ratio_Zen,data=alldata,group=Random_ID,color=group,geom="line")
# now need to determine which INS ratio/proinsulin ratio to use for cross-sectional analyses
# T1D: results closest to T1D onset
alldata$Date_of_Diagnosis <- as.Date(mdy(alldata$Date_of_Diagnosis))
alldata$timec[alldata$final.group=="T1D"] <- abs(alldata$Draw_Date[alldata$final.group=="T1D"] - alldata$Date_of_Diagnosis[alldata$final.group=="T1D"])
# create new variable for IGTT
alldata$igtt1[alldata$GLU0>100 & alldata$GLU0<126] <- 1
alldata$igtt2[alldata$GLU120>= 140 & alldata$GLU120<200] <- 1
alldata$igtt3[alldata$GLU30>200 | alldata$GLU60>200 | alldata$GLU90>200] <- 1
alldata$igtt[alldata$igtt1==1 | alldata$igtt2==1 | alldata$igtt3==1] <- 1
# now need to take maximum of IGTT to see if they ever had IGTT
igttcheck <- alldata[c("Random_ID","igtt")]
igttcheck$igtt[is.na(igttcheck$igtt)] <- 0
igttever <- aggregate(igttcheck$igtt,by=list(igttcheck$Random_ID),max)
names(igttever) <- c("Random_ID","igttever")
alldata <- merge(alldata,igttever,by="Random_ID")
alldata$igttever[is.na(alldata$igttever)] <- 0
alldata$age <- floor(alldata$DOB %--% alldata$Draw_Date / dyears(1))
# calculate follow up time
firstvisit <- alldata[order(alldata$Random_ID,alldata$Draw_Date),]
firstvisit <- firstvisit[,c("Random_ID","Draw_Date","Date_of_Diagnosis")]
firstvisit <- firstvisit %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
names(firstvisit) <- c("Random_ID","firstdate","Date_of_Diagnosis")
lastvisit <- alldata[order(alldata$Random_ID,desc(alldata$Draw_Date)),]
lastvisit <- lastvisit[,c("Random_ID","Draw_Date")]
names(lastvisit) <- c("Random_ID","lastdate")
lastvisit <- lastvisit %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
firstlast <- merge(firstvisit,lastvisit,by="Random_ID",all=TRUE)
firstlast$lastdate <- ifelse(!is.na(firstlast$Date_of_Diagnosis) & firstlast$Date_of_Diagnosis>firstlast$lastdate,
firstlast$Date_of_Diagnosis,firstlast$lastdate)
firstlast$lastdate <- as.Date(firstlast$lastdate,origin = "1970-01-01")
firstlast$followup <-  as.numeric(firstlast$lastdate - firstlast$firstdate) / 365.25
alldata <- merge(alldata,firstlast,by="Random_ID",all=TRUE)
futab <- tapply(alldata$followup,alldata$group2,summary)
# labels
label(alldata$Pro_pep)='Proinsulin ratio'
label(alldata$Gender)='Gender'
label(alldata$DPT1Risk)="DPT1 Risk Score"
label(alldata$DR3)="DR3"
label(alldata$DR4)="DR4"
label(alldata$DR3DR4)="DR3DR4"
label(alldata$BMI)="BMI"
label(alldata$followup)="Follow-up time (yrs)"
# create dataset with earliest proinsulin ratio
earliest_pro <- alldata[!is.na(alldata$Pro_pep),]
earliest_pro <- earliest_pro[order(earliest_pro$Random_ID,earliest_pro$Draw_Date),]
earliest_pro <- earliest_pro %>% group_by(Random_ID) %>% filter(row_number() == 1)
earliest_pro$age <- floor(earliest_pro$DOB %--% earliest_pro$Draw_Date / dyears(1))
# create labeled factor for final.group
#check <- alldata %>% distinct(Random_ID, .keep_all=TRUE)
#table(check$final.group)
#alldata$final.group <- as.factor(alldata$final.group)
#check <- alldata %>% distinct(Random_ID, .keep_all=TRUE)
#table(check$final.group)
#levels(alldata$final.group) = c("Negative","Single ab positive","Multiple ab positive","T1D")
#check <- alldata %>% distinct(Random_ID, .keep_all=TRUE)
#table(check$final.group)
# pull out T1D - if they have T1D at any time point, they are in the T1D group
t1d <- alldata[alldata$T1D == "Yes",]
t1d <- t1d[order(t1d$Random_ID, t1d$Draw_Date),]
# pull out nonT1D
nont1d <- alldata[alldata$T1D != "Yes",]
nont1d <- nont1d[order(nont1d$Random_ID, nont1d$Draw_Date),]
# total of 132 subjects, 15 in T1D and 117 nonT1D
# pull out records with non-missing Pro_pep
t1d_select_pro <- t1d[!is.na(t1d$Pro_pep),]
temp <-  aggregate(t1d_select_pro$timec,by=list(t1d_select_pro$Random_ID),min)
names(temp) <- c("Random_ID","time_from_diagnosis")
t1d_select_pro <- merge(t1d_select_pro,temp,by = "Random_ID")
t1d_select_pro <- t1d_select_pro[t1d_select_pro$time_from_diagnosis==t1d_select_pro$timec,]
# now if the proinsulin value closest to dx is not within 3 months, need to use group at the time of proinsulin
for(i in 1:nrow(t1d_select_pro)) {
t1d_select_pro$final.group[i] <- ifelse(t1d_select_pro$time_from_diagnosis[i]<=90, "T1D",
ifelse(t1d_select_pro$numpos[i]==0,"Negative",
ifelse(t1d_select_pro$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
# for non-T1D group, use the most recent proinsulin value that corresponds to the final ab group
# if there isn't a proinsulin value that corresponds to final ab group, use the most recent proinsulin value
# available and reclassify the person into the ab group corresponding to that visit
nont1d_select_pro <- nont1d[!is.na(nont1d$Pro_pep),]
check <- nont1d_select_pro %>% distinct(Random_ID, .keep_all=TRUE)
nont1d_select_pro$flag[nont1d_select_pro$final.group == nont1d_select_pro$group] <- 1
# create another df for people who are flagged who have a propep that matches their final group
nont1D_match <- nont1d_select_pro[nont1d_select_pro$flag==1,]
# keep the most recent proinsulin for those people
nont1D_match <- nont1D_match[order(nont1D_match$Random_ID,desc(nont1D_match$Draw_Date)),]
nont1D_match <- nont1D_match %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
# go back to original dataset and take out people who had a match
# this leaves only people who do not have a proinsulin value drawn while they were in their final.group category
x <- as.data.frame(nont1D_match$Random_ID)
x$flagx <- rep(1,length(x))
names(x) <- c("Random_ID","flagx")
nont1d_select_pro <- merge(nont1d_select_pro,x,by="Random_ID",all.x = TRUE,all.y=TRUE)
nont1d_nomatch <- nont1d_select_pro[is.na(nont1d_select_pro$flagx),]
# keep the most recent proinsulin value
nont1d_nomatch <- nont1d_nomatch[order(nont1d_nomatch$Random_ID,desc(nont1d_nomatch$Draw_Date)),]
nont1d_nomatch <- nont1d_nomatch %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
# now reclassify final.group to be equal to current group
nont1d_nomatch$final.group <- nont1d_nomatch$group
# combine those with match and those without
nont1d_select_pro <- bind_rows(nont1D_match,nont1d_nomatch)
# people in match group: 68
# people in no match group: 17
# people in final dataset: 85
# combine the results for the pro-pep analysis
t1d_select_pro$most_recent_draw <- NA
nont1d_select_pro$time_from_diagnosis <- NA
allpro <- bind_rows(nont1d_select_pro,t1d_select_pro)
allpro$age <- floor(allpro$DOB %--% allpro$Draw_Date / dyears(1))
label(allpro$Pro_pep)="Proinsulin ratio"
# correct group2 variable in allpro
allpro$group2 <- ifelse(allpro$final.group=="T1D" | allpro$final.group=="Multiple ab positive","T1D/multiple ab pos",allpro$final.group)
nneg <- length(unique(allpro[allpro$final.group=="Negative",]$Random_ID))
nsing <- length(unique(allpro[allpro$final.group=="Single ab positive",]$Random_ID))
nmult <- length(unique(allpro[allpro$final.group=="Multiple ab positive",]$Random_ID))
# need to update final.group variable using what is in allpro
#correct_group <- subset(allpro, select =c(Random_ID,final.group))
#tab1data <- subset(tab1data, select = -c(final.group))
#tab1data <- merge(tab1data,correct_group,by="Random_ID",all=TRUE)
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
# for table 1, need the draw date corresponding to the proins used in cross sectional analyses
datepro <- allpro[c("Random_ID","Draw_Date")]
names(datepro) <- c("Random_ID","Date_proins")
getdates <- datepro
# keep the latest date to find A1c and age
getdates$tab1_date <- pmax(getdates$Date_proins,na.rm=TRUE)
getdates$tab1flag <- rep(1,nrow(getdates))
getdates$Draw_Date <- getdates$tab1_date
tab1data <- merge(alldata,getdates,by=c("Random_ID","Draw_Date"))
tab1data$age <- floor(tab1data$DOB %--% tab1data$Draw_Date / dyears(1))
label(tab1data$Pro_pep)="Proinsulin ratio"
# compare proinsulin ratios between T1D, Ab-, single Ab+, multiple Ab+
# unadjusted comparisons
tab_pro <- final_table(allpro,'Pro_pep',group=as.factor(allpro$final.group),margin=2,single=0,ron=2)
tab_pro2 <- final_table(allpro,'Pro_pep',group=as.factor(allpro$group2),margin=2,single=0,ron=2)
tab_pro3 <- final_table(allpro[allpro$final.group != "T1D",],'Pro_pep',
group=as.factor(allpro[allpro$final.group != "T1D",]$final.group),margin=2,single=0,ron=2)
# adjust for age, sex, and BMI
allpro$l_Pro_pep=log(allpro$Pro_pep)
# lm.pro = with(allpro, lm(Pro_pep ~ as.factor(final.group)))
# summary(lm.pro)
# anova(lm.pro)
# plot(lm.pro)
# lm.pro <- aov(lm.pro)
# summary(lm.pro)
# anova(lm.pro)
# TukeyHSD(lm.pro)
# log transformed
lm.pro = with(allpro, lm(Pro_pep ~ as.factor(group2) + age + Gender + BMI))
summary(lm.pro)
anova(lm.pro)
lm.pro <- aov(lm.pro)
summary(lm.pro)
anova(lm.pro)
pval_final.group <- anova(lm.pro)[1,5]
diffs_final.group <- TukeyHSD(lm.pro, which = "as.factor(group2)")
# do proinsulin ratios correlate with biochemical and ECL antibody levels
corr_pro <- rcorr(as.matrix(allpro[, c( "Pro_pep","gadz","ia2z","mIAA","ZnT8","ICA",
"ECL_GADA","ECL_IA2A","ECL_IAA")])
,type = "spearman")
corr_pro <- flattenCorrMatrix(corr_pro$r, corr_pro$P)
corr_pro <- corr_pro[corr_pro$row=="Pro_pep",]
# write cross-sectional dataset for Taylor
write.csv(allpro,file="S:\\Shared Projects\\Laura\\BDC\\Projects\\Andrea Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\allpro.csv")
