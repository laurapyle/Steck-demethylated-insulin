alldata$Height.cm[alldata$Draw_Date==as.Date("2009-04-20") & alldata$Random_ID=="150283"] <- 184.6
alldata$Weight.kg[alldata$Draw_Date==as.Date("2009-04-20") & alldata$Random_ID=="150283"] <- 125.4
alldata$Height.cm[alldata$Draw_Date==as.Date("2015-04-06") & alldata$Random_ID=="237376"] <- 174.9
alldata$Weight.kg[alldata$Draw_Date==as.Date("2015-04-06") & alldata$Random_ID=="237376"] <- 75.39
# calculate BMI
alldata$BMI <- alldata$Weight.kg / ((alldata$Height.cm/100)^2)
#bad <- alldata[alldata$BMI>50,]
#bad <- bad[!is.na(bad$Random_ID),]
#bad <- subset(bad,select=c("Random_ID","Draw_Date","Height.cm","Weight.kg","BMI"))
# combine race/ethnicity
alldata$race_eth <- NA
alldata$race_eth[(alldata$Race=="White" & alldata$Ethnicity=="Non-Hispanic origin")]  <- "NHW"
alldata$race_eth[(alldata$Race=="White" & alldata$Ethnicity=="Non-Hispanic White")] <- "NHW"
alldata$race_eth[(alldata$Race=="White" & alldata$Ethnicity == "Not Hispanic or Latino")] <- "NHW"
alldata$race_eth[alldata$Ethnicity=="Hispanic" | alldata$Ethnicity=="Hispanic or Latino" | alldata$Ethnicity=="Hispanic/Latino/Spanish origin"] <- "Hispanic"
alldata$race_eth[is.na(alldata$race_eth)] <- "Other"
alldata$race_eth <- as.factor(alldata$race_eth)
# first code each antibody as positive negative
for(i in 1:nrow(alldata)){
###coding for miaa
a <-ifelse(is.na(alldata$mIAA[i]),
NA,
ifelse(alldata$mIAA[i] <= 0.01, 0, 1)
)
alldata$miaa_cat[i]<- a
###coding for first form of gad65
b <-ifelse(is.na(alldata$GAD65[i]),
NA,
ifelse(alldata$GAD65[i] <= 0.032, 0, 1)
)
alldata$gad65_cat[i]<- b
###coding for second form of gad65
c<-ifelse(is.na(alldata$GAD65H[i]),
NA,
ifelse(alldata$GAD65H[i] <= 20, 0, 1)
)
alldata$gad65h_cat[i]<- c
###coding for first form of ica512/ia2
d<-ifelse(is.na(alldata$ICA512[i]),
NA,
ifelse(alldata$ICA512[i] <= 0.049, 0, 1)
)
alldata$ica512_cat[i]<- d
###coding for second form of ica512/ia2
e<-ifelse(is.na(alldata$IA_2H[i]),
NA,
ifelse(alldata$IA_2H[i] <= 5, 0, 1)
)
alldata$ia2h_cat[i]<- e
###coding for znt8
f<-ifelse(is.na(alldata$ZnT8[i]),
NA,
ifelse(alldata$ZnT8[i] <= 0.02, 0, 1)
)
alldata$znt8_cat[i]<- f
}
#####combining both forms of gad65 tests
for(i in 1:nrow(alldata)){
test <- sum(alldata$ica512_cat[i],alldata$ia2h_cat[i],na.rm=TRUE)
de <- ifelse(is.na(alldata$ica512_cat[i]) & is.na(alldata$ia2h_cat[i]),
NA,
ifelse(test>=1,1,0))
alldata$ica512_ia2_cat[i]<- de
test2 <- sum(alldata$gad65_cat[i],alldata$gad65h_cat[i],na.rm=TRUE)
bc <- ifelse(is.na(alldata$gad65_cat[i]) & is.na(alldata$gad65h_cat[i]),
1,
ifelse(test2>=1,1,0))
alldata$GAD65_combo_cat[i]<- bc
}
View(alldata)
# if all ab results missing, delete the record
misstwo <- alldata[is.na(alldata$mIAA) & is.na(alldata$ica512_ia2_cat),]
alldata <- alldata[!is.na(alldata$mIAA) | !is.na(alldata$miaa_cat) | !is.na(alldata$ica512_ia2_cat),]
# 36 records deleted
# check if anyone is missing GAD, ICA/IA2, or mIAA
missing <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
write.csv(missing,file="missing.csv")
# get rid of visits with missing mIAA data
missmiaa <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
alldata <- alldata[!is.na(alldata$GAD65_combo_cat) & !is.na(alldata$miaa_cat) & !is.na(alldata$ica512_ia2_cat),]
# 40 records deleted
# calculate number of positive ab at each visit
for(i in 1:nrow(alldata)){
alldata$numpos[i] <- sum(alldata$ica512_ia2_cat[i],alldata$GAD65_combo_cat[i],alldata$miaa_cat[i],alldata$znt8_cat[i],na.rm=T)
}
# calculate z-scores for GAD and IA2
alldata$gad65z <- (alldata$GAD65 - mean(alldata$GAD65,na.rm = TRUE))/sd(alldata$GAD65,na.rm = TRUE)
alldata$gad65hz <- (alldata$GAD65H - mean(alldata$GAD65H,na.rm = TRUE))/sd(alldata$GAD65H,na.rm = TRUE)
alldata$gadz <- ifelse(!is.na(alldata$GAD65),alldata$gad65z,alldata$gad65hz)
alldata$ica512z <- (alldata$ICA512 - mean(alldata$ICA512,na.rm = TRUE))/sd(alldata$ICA512,na.rm = TRUE)
alldata$ia2hz <- (alldata$IA_2H - mean(alldata$IA_2H,na.rm = TRUE))/sd(alldata$IA_2H,na.rm = TRUE)
alldata$ia2z <- ifelse(!is.na(alldata$ICA512),alldata$ica512z,alldata$ia2hz)
# exclude people who do not have a proinsulin ratio
sortds <- alldata[order(alldata$Random_ID,desc(alldata$Pro_pep)),]
hasproins <- sortds %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
a <- hasproins[is.na(hasproins$Pro_pep),]
a <- a[,1]
a$flaga <- rep(1,nrow(a))
# a contains a list of IDs of people missing proins
# people with flaga are missing proins and need to be excluded
exclu <- a[a$flaga==1,]
misspro <- length(unique(exclu$Random_ID))
alldata <- merge(alldata,a,by="Random_ID",all.x=TRUE,all.y=TRUE)
alldata$flaga[is.na(alldata$flaga)] <- 0
alldata <- alldata[alldata$flaga==0,]
# who is missing T1D data?
missingt1d <- alldata[is.na(alldata$T1D),]
# no one is missing t1d status
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
View(counts)
View(diagnosis.table)
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group","ica512_ia2_cat","GAD65_combo_cat"])]
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group","ica512_ia2_cat","GAD65_combo_cat")]
View(diagnosis.table)
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1 && alldata$ica512_ia2_cat==1,"Single IAA positive",
ifelse(alldata$numpos[i]==1 && alldata$GAD65_combo_cat==1,"Single GAD positive",
ifelse(alldata$numpos[i]==1,"Other single ab positive","Multiple ab positive")))))
}
View(alldata[c("Random_ID","numpos","group","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")])
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1 & alldata$ica512_ia2_cat==1,"Single IAA positive",
ifelse(alldata$numpos[i]==1 & alldata$GAD65_combo_cat==1,"Single GAD positive",
ifelse(alldata$numpos[i]==1,"Other single ab positive","Multiple ab positive")))))
}
View(alldata[c("Random_ID","numpos","group","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")])
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1 & alldata$ica512_ia2_cat[i]==1,"Single IAA positive",
ifelse(alldata$numpos[i]==1 & alldata$GAD65_combo_cat[i]==1,"Single GAD positive",
ifelse(alldata$numpos[i]==1,"Other single ab positive","Multiple ab positive")))))
}
View(alldata[c("Random_ID","numpos","group","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")])
View(alldata[c("Random_ID","numpos","group","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")])
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
for(i in 1:nrow(alldata)) {
alldata$newgroup[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1 & alldata$ica512_ia2_cat[i]==1,"Single IAA positive",
ifelse(alldata$numpos[i]==1 & alldata$GAD65_combo_cat[i]==1,"Single GAD positive",
ifelse(alldata$numpos[i]==1,"Other single ab positive","Multiple ab positive")))))
}
View(alldata[c("Random_ID","numpos","group","newgroup","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")])
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
# Aggregate diagnosis table taking the maximum value.
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
# Find the single ab+ who were incorrectly categorized, set back to 0.
recat <- single[
which(single %in% diagnosis.table[diagnosis.table$group == 1,"Random_ID"])]
diagnosis.table[diagnosis.table$Random_ID %in% recat,"group"] <- 0
colnames(diagnosis.table) <- c("Random_ID","final.group")
# make categorical variable for final group
diagnosis.table$final.group[diagnosis.table$final.group==0] <- "Negative"
diagnosis.table$final.group[diagnosis.table$final.group==1] <- "Single ab positive"
diagnosis.table$final.group[diagnosis.table$final.group==2] <- "Multiple ab positive"
diagnosis.table$final.group[diagnosis.table$final.group==3] <- "T1D"
# merge final group category with all results
allresults <- merge(allresults,diagnosis.table,by="Random_ID")
alldata <- merge(alldata,diagnosis.table,by = "Random_ID")
# create new variable for group with T1D and multiple ab combined
alldata$group2 <- ifelse(alldata$final.group=="T1D" | alldata$final.group=="Multiple ab positive","T1D/multiple ab pos",alldata$final.group)
View(alldata)
View(alldata[c("Random_ID","Draw_Date","group","newgroup","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")])
View(alldata[c("Random_ID","Draw_Date","final.group","newgroup","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")])
# of those who were previously classified as single antibody positive, describe # of single ab positive visits
singlecheck <- alldata[alldata$final.group=="Single ab positive"]
# of those who were previously classified as single antibody positive, describe # of single ab positive visits
singlecheck <- alldata[alldata$final.group=="Single ab positive",]
View(singlecheck)
View(singlecheck)
View(singlecheck[c("Random_ID","Draw_Date","final.group","newgroup","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")])
# Count visits by ab status for each person classified as single ab positive
singlecheck$counts <- plyr::count(singlecheck,c("Random_ID","newgroup"))
# Count visits by ab status for each person classified as single ab positive
singlecounts <- plyr::count(singlecheck,c("Random_ID","newgroup"))
View(singlecounts)
View(singlecounts)
# reshape the count dataframe
singlecount_wide <- reshape(singlecounts,timevar="Random_ID",direction="wide")
# reshape the count dataframe
singlecount_wide <- reshape(singlecounts,timevar="Random_ID",idvar=NA,direction="wide")
help(reshape)
# reshape the count dataframe
singlecount_wide <- reshape(singlecounts,idvar="Random_ID",direction="wide")
# reshape the count dataframe
singlecount_wide <- reshape(singlecounts,timevar="Random_ID",idvar="Random_ID",direction="wide")
# reshape the count dataframe
singlecount_wide <- reshape(singlecounts,timevar="newgroup",idvar="Random_ID",direction="wide")
View(singlecounts)
View(singlecount_wide)
write.csv(singlecount_wide,"S:\\Shared Projects\\Laura\\BDC\\Projects\\Andrea Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\checking_single_ab.csv")
singlecount_wide$newcat[singlecount_wide$`freq.Single GAD positive`>=2 & is.na(singlecount_wide$`freq.Other single ab positive`)
&is.na(singlecount_wide$`freq.Single IAA positive`)] <- "Single GAD positive"
write.csv(singlecount_wide,"S:\\Shared Projects\\Laura\\BDC\\Projects\\Andrea Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\checking_single_ab.csv")
singlecount_wide$newcat[is.na(singlecount_wide$`freq.Single GAD positive`) & is.na(singlecount_wide$`freq.Single IAA positive`)]
<- "Other single ab positive"
singlecount_wide$newcat[is.na(singlecount_wide$`freq.Single GAD positive`) & is.na(singlecount_wide$`freq.Single IAA positive`)] <- "Other single ab positive"
write.csv(singlecount_wide,"S:\\Shared Projects\\Laura\\BDC\\Projects\\Andrea Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\checking_single_ab.csv")
singlecount_wide$newcat[singlecount_wide$`freq.Single IAA positive`>=2 & is.na(singlecount_wide$`freq.Other single ab positive`)
&is.na(singlecount_wide$`freq.Single GAD positive`)] <- "Single IAA positive"
write.csv(singlecount_wide,"S:\\Shared Projects\\Laura\\BDC\\Projects\\Andrea Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\checking_single_ab.csv")
library(dplyr)
library(lubridate)
library(graphics)
library(ggplot2)
library(Hmisc)
#library(Table1)
library(knitr)
library(nlme)
#library(ppcor)
#library(sjlabelled)
# read in the data
longitudinal_visit_info <- read.csv("S:\\Shared Projects\\Laura\\BDC\\Projects\\Andrea Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\longitudinal 091818.csv")
ParticipantInfo_risk <- read.csv("S:\\Shared Projects\\Laura\\BDC\\Projects\\Andrea Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\Participant Info risk 091818.csv",na.strings = c("NA"," ","","      "))
source("C:\\Users\\pylell\\Documents\\GitHub\\General-code\\temp_table1.r")
source("C:\\Users\\pylell\\Documents\\GitHub\\General-code\\01_functions.r")
# get rid of duplicates
ParticipantInfo_risk <- unique(ParticipantInfo_risk)
# no duplicates
obslong <- nrow(longitudinal_visit_info)
nppt <- nrow(ParticipantInfo_risk)
# merge participant info and longitudinal data
keep_ppt <- data.frame(ParticipantInfo_risk$TrialNet,
ParticipantInfo_risk$T1D,
ParticipantInfo_risk$Date.of.Diagnosis,
ParticipantInfo_risk$DOB, ParticipantInfo_risk$Gender, ParticipantInfo_risk$Race, ParticipantInfo_risk$Ethnicity,
ParticipantInfo_risk$DPT1.Risk.Score,ParticipantInfo_risk$HLA, ParticipantInfo_risk$DR3,ParticipantInfo_risk$DR4)
colnames(keep_ppt) <- c("Random_ID","T1D","Date_of_Diagnosis","DOB","Gender",
"Race","Ethnicity","DPT1Risk","HLA","DR3","DR4")
keep_long <- data.frame(longitudinal_visit_info$PID,
longitudinal_visit_info$Draw.Date,
longitudinal_visit_info$GAD65,
longitudinal_visit_info$GAD65H,
longitudinal_visit_info$ICA512,
longitudinal_visit_info$IA2H,
longitudinal_visit_info$mIAA,
longitudinal_visit_info$ZnT8,
longitudinal_visit_info$ICA,
longitudinal_visit_info$ECL_GADA,
longitudinal_visit_info$ECL_IA.2A,
longitudinal_visit_info$ECL_IAA,
longitudinal_visit_info$Proinsulin_pM.L,
longitudinal_visit_info$PEP0,
longitudinal_visit_info$HbA1c,
longitudinal_visit_info$GLU0,
longitudinal_visit_info$GLU30,
longitudinal_visit_info$GLU60,
longitudinal_visit_info$GLU90,
longitudinal_visit_info$GLU120,
longitudinal_visit_info$Height.cm,
longitudinal_visit_info$Weight.kg)
colnames(keep_long) <- c("Random_ID","Draw_Date","GAD65","GAD65H","ICA512","IA_2H","mIAA","ZnT8","ICA","ECL_GADA","ECL_IA2A","ECL_IAA","Proinsulin_pM_L","PEP0","HbA1c","GLU0","GLU30","GLU60","GLU90","GLU120","Height.cm","Weight.kg")
# convert draw date to date
#keep_long$Draw_Date <- mdy_hms(as.character(keep_long$Draw_Date))
#keep_long$Draw_Date <- as.POSIXlt(as.character(keep_long$Draw_Date),format="%m%d%Y %H%M")
keep_long$Draw_Date <- mdy_hm(as.character(keep_long$Draw_Date))
keep_ppt$DOB <- mdy(as.character(keep_ppt$DOB))
# calculate fasting Cpeptide in pM/L
keep_long$PEP0_pM_L <- keep_long$PEP0*331.09
# calculate proinsulin/Cpep ratio
keep_long$Pro_pep <- keep_long$Proinsulin_pM_L/keep_long$PEP0_pM_L*100
# merge  datasets
alldata <- merge(keep_ppt,keep_long,by="Random_ID",all.x=F,all.y=F)
N <- length(unique(alldata$Random_ID))
# fix gender coding female Female   male   Male
alldata$Gender[alldata$Gender=='female'] <- "Female"
alldata$Gender[alldata$Gender=='male'] <- "Male"
alldata$Gender <- droplevels(alldata$Gender)
# new variable for DR3/DR4
alldata$DR3DR4[alldata$DR3=="PRESENT" & alldata$DR4=="PRESENT"] <- "PRESENT"
alldata$DR3DR4[!(alldata$DR3=="PRESENT" & alldata$DR4=="PRESENT")] <- "ABSENT"
alldata$DR3DR4[is.na(alldata$DR3) & is.na(alldata$DR4)] <- NA
# correct some values per Andrea
alldata$Height.cm[alldata$Draw_Date==as.Date("2008-12-30") & alldata$Random_ID=="146273"] <- 172.5
alldata$Weight.kg[alldata$Draw_Date==as.Date("2008-12-30") & alldata$Random_ID=="146273"] <- 57
alldata$Height.cm[alldata$Draw_Date==as.Date("2008-11-26") & alldata$Random_ID=="146513"] <- 164.6
alldata$Weight.kg[alldata$Draw_Date==as.Date("2008-11-26") & alldata$Random_ID=="146513"] <- 52.9
alldata$Height.cm[alldata$Draw_Date==as.Date("2013-10-14") & alldata$Random_ID=="148088"] <- 161.3
alldata$Weight.kg[alldata$Draw_Date==as.Date("2013-10-14") & alldata$Random_ID=="148088"] <- 67
alldata$Height.cm[alldata$Draw_Date==as.Date("2010-08-07") & alldata$Random_ID=="149118"] <- 156.9
alldata$Weight.kg[alldata$Draw_Date==as.Date("2010-08-07") & alldata$Random_ID=="149118"] <- 61.8
alldata$Height.cm[alldata$Draw_Date==as.Date("2009-04-20") & alldata$Random_ID=="150283"] <- 184.6
alldata$Weight.kg[alldata$Draw_Date==as.Date("2009-04-20") & alldata$Random_ID=="150283"] <- 125.4
alldata$Height.cm[alldata$Draw_Date==as.Date("2015-04-06") & alldata$Random_ID=="237376"] <- 174.9
alldata$Weight.kg[alldata$Draw_Date==as.Date("2015-04-06") & alldata$Random_ID=="237376"] <- 75.39
# calculate BMI
alldata$BMI <- alldata$Weight.kg / ((alldata$Height.cm/100)^2)
#bad <- alldata[alldata$BMI>50,]
#bad <- bad[!is.na(bad$Random_ID),]
#bad <- subset(bad,select=c("Random_ID","Draw_Date","Height.cm","Weight.kg","BMI"))
# combine race/ethnicity
alldata$race_eth <- NA
alldata$race_eth[(alldata$Race=="White" & alldata$Ethnicity=="Non-Hispanic origin")]  <- "NHW"
alldata$race_eth[(alldata$Race=="White" & alldata$Ethnicity=="Non-Hispanic White")] <- "NHW"
alldata$race_eth[(alldata$Race=="White" & alldata$Ethnicity == "Not Hispanic or Latino")] <- "NHW"
alldata$race_eth[alldata$Ethnicity=="Hispanic" | alldata$Ethnicity=="Hispanic or Latino" | alldata$Ethnicity=="Hispanic/Latino/Spanish origin"] <- "Hispanic"
alldata$race_eth[is.na(alldata$race_eth)] <- "Other"
alldata$race_eth <- as.factor(alldata$race_eth)
# first code each antibody as positive negative
for(i in 1:nrow(alldata)){
###coding for miaa
a <-ifelse(is.na(alldata$mIAA[i]),
NA,
ifelse(alldata$mIAA[i] <= 0.01, 0, 1)
)
alldata$miaa_cat[i]<- a
###coding for first form of gad65
b <-ifelse(is.na(alldata$GAD65[i]),
NA,
ifelse(alldata$GAD65[i] <= 0.032, 0, 1)
)
alldata$gad65_cat[i]<- b
###coding for second form of gad65
c<-ifelse(is.na(alldata$GAD65H[i]),
NA,
ifelse(alldata$GAD65H[i] <= 20, 0, 1)
)
alldata$gad65h_cat[i]<- c
###coding for first form of ica512/ia2
d<-ifelse(is.na(alldata$ICA512[i]),
NA,
ifelse(alldata$ICA512[i] <= 0.049, 0, 1)
)
alldata$ica512_cat[i]<- d
###coding for second form of ica512/ia2
e<-ifelse(is.na(alldata$IA_2H[i]),
NA,
ifelse(alldata$IA_2H[i] <= 5, 0, 1)
)
alldata$ia2h_cat[i]<- e
###coding for znt8
f<-ifelse(is.na(alldata$ZnT8[i]),
NA,
ifelse(alldata$ZnT8[i] <= 0.02, 0, 1)
)
alldata$znt8_cat[i]<- f
}
#####combining both forms of gad65 tests
for(i in 1:nrow(alldata)){
test <- sum(alldata$ica512_cat[i],alldata$ia2h_cat[i],na.rm=TRUE)
de <- ifelse(is.na(alldata$ica512_cat[i]) & is.na(alldata$ia2h_cat[i]),
NA,
ifelse(test>=1,1,0))
alldata$ica512_ia2_cat[i]<- de
test2 <- sum(alldata$gad65_cat[i],alldata$gad65h_cat[i],na.rm=TRUE)
bc <- ifelse(is.na(alldata$gad65_cat[i]) & is.na(alldata$gad65h_cat[i]),
1,
ifelse(test2>=1,1,0))
alldata$GAD65_combo_cat[i]<- bc
}
# if all ab results missing, delete the record
misstwo <- alldata[is.na(alldata$mIAA) & is.na(alldata$ica512_ia2_cat),]
alldata <- alldata[!is.na(alldata$mIAA) | !is.na(alldata$miaa_cat) | !is.na(alldata$ica512_ia2_cat),]
# 36 records deleted
# check if anyone is missing GAD, ICA/IA2, or mIAA
missing <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
write.csv(missing,file="missing.csv")
# get rid of visits with missing mIAA data
missmiaa <- alldata[is.na(alldata$GAD65_combo_cat) | is.na(alldata$miaa_cat) | is.na(alldata$ica512_ia2_cat),]
alldata <- alldata[!is.na(alldata$GAD65_combo_cat) & !is.na(alldata$miaa_cat) & !is.na(alldata$ica512_ia2_cat),]
# 40 records deleted
# calculate number of positive ab at each visit
for(i in 1:nrow(alldata)){
alldata$numpos[i] <- sum(alldata$ica512_ia2_cat[i],alldata$GAD65_combo_cat[i],alldata$miaa_cat[i],alldata$znt8_cat[i],na.rm=T)
}
# calculate z-scores for GAD and IA2
alldata$gad65z <- (alldata$GAD65 - mean(alldata$GAD65,na.rm = TRUE))/sd(alldata$GAD65,na.rm = TRUE)
alldata$gad65hz <- (alldata$GAD65H - mean(alldata$GAD65H,na.rm = TRUE))/sd(alldata$GAD65H,na.rm = TRUE)
alldata$gadz <- ifelse(!is.na(alldata$GAD65),alldata$gad65z,alldata$gad65hz)
alldata$ica512z <- (alldata$ICA512 - mean(alldata$ICA512,na.rm = TRUE))/sd(alldata$ICA512,na.rm = TRUE)
alldata$ia2hz <- (alldata$IA_2H - mean(alldata$IA_2H,na.rm = TRUE))/sd(alldata$IA_2H,na.rm = TRUE)
alldata$ia2z <- ifelse(!is.na(alldata$ICA512),alldata$ica512z,alldata$ia2hz)
# exclude people who do not have a proinsulin ratio
sortds <- alldata[order(alldata$Random_ID,desc(alldata$Pro_pep)),]
hasproins <- sortds %>% group_by(Random_ID) %>% filter(row_number(Random_ID) == 1)
a <- hasproins[is.na(hasproins$Pro_pep),]
a <- a[,1]
a$flaga <- rep(1,nrow(a))
# a contains a list of IDs of people missing proins
# people with flaga are missing proins and need to be excluded
exclu <- a[a$flaga==1,]
misspro <- length(unique(exclu$Random_ID))
alldata <- merge(alldata,a,by="Random_ID",all.x=TRUE,all.y=TRUE)
alldata$flaga[is.na(alldata$flaga)] <- 0
alldata <- alldata[alldata$flaga==0,]
# who is missing T1D data?
missingt1d <- alldata[is.na(alldata$T1D),]
# no one is missing t1d status
# group status at each visit - but people can change groups
for(i in 1:nrow(alldata)) {
alldata$group[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1,"Single ab positive","Multiple ab positive")))
}
for(i in 1:nrow(alldata)) {
alldata$newgroup[i] <- ifelse(alldata$T1D[i]=="Yes","T1D",
ifelse(alldata$numpos[i]==0,"Negative",
ifelse(alldata$numpos[i]==1 & alldata$ica512_ia2_cat[i]==1,"Single IAA positive",
ifelse(alldata$numpos[i]==1 & alldata$GAD65_combo_cat[i]==1,"Single GAD positive",
ifelse(alldata$numpos[i]==1,"Other single ab positive","Multiple ab positive")))))
}
#-------------------------------------------------------------------------------
# Tim's group status code.
# Separate table for diagnosis.
diagnosis.table <- alldata[,c("Random_ID","Draw_Date","group")]
# save a copy of this data to merge back with the final dx
allresults <- diagnosis.table
# Count diagnoses per subject
counts <- plyr::count(diagnosis.table,c("Random_ID","group"))
# Find participants with only one single ab+
single <- counts[counts$group == "Single ab positive",]
single <- single[single$freq < 2,"Random_ID"]
# Convert group to numeric
diagnosis.table$group <-
plyr::revalue(diagnosis.table$group,c("Negative" = 0,"Single ab positive" = 1,
"Multiple ab positive" = 2,"T1D" = 3))
diagnosis.table$group <- as.numeric(diagnosis.table$group)
# Aggregate diagnosis table taking the maximum value.
diagnosis.table <- aggregate(group ~ Random_ID, data = diagnosis.table, max)
# Find the single ab+ who were incorrectly categorized, set back to 0.
recat <- single[
which(single %in% diagnosis.table[diagnosis.table$group == 1,"Random_ID"])]
diagnosis.table[diagnosis.table$Random_ID %in% recat,"group"] <- 0
colnames(diagnosis.table) <- c("Random_ID","final.group")
# make categorical variable for final group
diagnosis.table$final.group[diagnosis.table$final.group==0] <- "Negative"
diagnosis.table$final.group[diagnosis.table$final.group==1] <- "Single ab positive"
diagnosis.table$final.group[diagnosis.table$final.group==2] <- "Multiple ab positive"
diagnosis.table$final.group[diagnosis.table$final.group==3] <- "T1D"
# merge final group category with all results
allresults <- merge(allresults,diagnosis.table,by="Random_ID")
alldata <- merge(alldata,diagnosis.table,by = "Random_ID")
# create new variable for group with T1D and multiple ab combined
alldata$group2 <- ifelse(alldata$final.group=="T1D" | alldata$final.group=="Multiple ab positive","T1D/multiple ab pos",alldata$final.group)
# of those who were previously classified as single antibody positive, describe # of single ab positive visits
singlecheck <- alldata[alldata$final.group=="Single ab positive",]
View(singlecheck)
singlecheck <- alldata[alldata$final.group=="Single ab     positive",c("Random_ID","Draw_Date","final.group","newgroup","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")]
singlecheck <- alldata[alldata$final.group=="Single ab positive",
c("Random_ID","Draw_Date","final.group","newgroup","ica512_ia2_cat","GAD65_combo_cat","znt8_cat","miaa_cat")]
singlecounts <- plyr::count(singlecheck,c("Random_ID","newgroup"))
View(singlecheck[])
# reshape the count dataframe
singlecount_wide <- reshape(singlecounts,timevar="newgroup",idvar="Random_ID",direction="wide")
singlecount_wide$newcat[singlecount_wide$`freq.Single GAD positive`>=2 & is.na(singlecount_wide$`freq.Other single ab positive`)
&is.na(singlecount_wide$`freq.Single IAA positive`)] <- "Single GAD positive"
singlecount_wide$newcat[is.na(singlecount_wide$`freq.Single GAD positive`) & is.na(singlecount_wide$`freq.Single IAA positive`)] <- "Other single ab positive"
singlecount_wide$newcat[singlecount_wide$`freq.Single IAA positive`>=2 & is.na(singlecount_wide$`freq.Other single ab positive`)
&is.na(singlecount_wide$`freq.Single GAD positive`)] <- "Single IAA positive"
View(singlecounts)
View(singlecount_wide)
forandrea <- merge(singlecheck,singlecount_wide,by="Random_ID")
View(forandrea)
write.csv(forandrea,"S:\\Shared Projects\\Laura\\BDC\\Projects\\Andrea Steck\\Trialnet progressors analysis\\Fourth analysis - demethylated insulin with updated dataset\\Data\\checking_single_ab.csv")
library(dplyr)
library(lubridate)
library(graphics)
library(ggplot2)
library(Hmisc)
#library(Table1)
library(knitr)
library(nlme)
#library(ppcor)
#library(sjlabelled)
# read in the data
longitudinal_visit_info <- read.csv("S:/Shared Projects/Laura/BDC/Projects/Andrea Steck/Trialnet progressors analysis/Fourth analysis - demethylated insulin with updated dataset/Data/longitudinal 091818.csv")
# read in the data
longitudinal_visit_info <- read.csv("S:/Shared Projects/Laura/BDC/Projects/Andrea Steck/Trialnet progressors analysis/Fourth analysis - demethylated insulin with updated dataset/Data/longitudinal 091818.csv")
